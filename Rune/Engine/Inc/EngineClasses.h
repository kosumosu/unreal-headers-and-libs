/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if _MSC_VER
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Spawned)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(KillCredit)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(InterpolateEnd)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(FootZoneChange)
AUTOGENERATE_NAME(HeadZoneChange)
AUTOGENERATE_NAME(PainTimer)
AUTOGENERATE_NAME(SpeechTimer)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(Expired)
AUTOGENERATE_NAME(SeePlayer)
AUTOGENERATE_NAME(EnemyNotVisible)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(UpdateEyeHeight)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(BotDesireability)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(PlayerTimeout)
AUTOGENERATE_NAME(Possess)
AUTOGENERATE_NAME(UnPossess)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(PreRender)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(ShowUpgradeMenu)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(RenderOverlays)
AUTOGENERATE_NAME(RenderTexture)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(WalkTexture)
AUTOGENERATE_NAME(BroadcastMessage)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(TouchJointOf)
AUTOGENERATE_NAME(JointTouchedBy)
AUTOGENERATE_NAME(JointDamaged)
AUTOGENERATE_NAME(GrabEdge)
AUTOGENERATE_NAME(AnimProxyEnd)
AUTOGENERATE_NAME(HandleConsoleCommand)
AUTOGENERATE_NAME(JointChangedDirection)
AUTOGENERATE_NAME(UseTrigger)
AUTOGENERATE_NAME(SystemInit)
AUTOGENERATE_NAME(SystemTick)
AUTOGENERATE_NAME(ParticleTick)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(LogGameSpecial)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(Update)
AUTOGENERATE_NAME(AlterDestination)
AUTOGENERATE_NAME(SpawnNotification)
AUTOGENERATE_NAME(LogGameSpecial2)
AUTOGENERATE_NAME(PostNetBeginPlay)
AUTOGENERATE_NAME(UpdateTactics)
AUTOGENERATE_NAME(AmbientSoundTimer)
AUTOGENERATE_NAME(GetSpringJointParms)
AUTOGENERATE_NAME(GetAccelJointParms)
AUTOGENERATE_NAME(GetAccelJointMagnitude)
AUTOGENERATE_NAME(ShadowUpdate)
AUTOGENERATE_NAME(FrameSwept)
AUTOGENERATE_NAME(FrameNotify)
AUTOGENERATE_NAME(PowerupStatusChanged)

#ifndef NAMES_ONLY

enum EInputKey
{
    IK_None                 =0,
    IK_LeftMouse            =1,
    IK_RightMouse           =2,
    IK_Cancel               =3,
    IK_MiddleMouse          =4,
    IK_Unknown05            =5,
    IK_Unknown06            =6,
    IK_Unknown07            =7,
    IK_Backspace            =8,
    IK_Tab                  =9,
    IK_Unknown0A            =10,
    IK_Unknown0B            =11,
    IK_Unknown0C            =12,
    IK_Enter                =13,
    IK_Unknown0E            =14,
    IK_Unknown0F            =15,
    IK_Shift                =16,
    IK_Ctrl                 =17,
    IK_Alt                  =18,
    IK_Pause                =19,
    IK_CapsLock             =20,
    IK_Unknown15            =21,
    IK_Unknown16            =22,
    IK_Unknown17            =23,
    IK_Unknown18            =24,
    IK_Unknown19            =25,
    IK_Unknown1A            =26,
    IK_Escape               =27,
    IK_Unknown1C            =28,
    IK_Unknown1D            =29,
    IK_Unknown1E            =30,
    IK_Unknown1F            =31,
    IK_Space                =32,
    IK_PageUp               =33,
    IK_PageDown             =34,
    IK_End                  =35,
    IK_Home                 =36,
    IK_Left                 =37,
    IK_Up                   =38,
    IK_Right                =39,
    IK_Down                 =40,
    IK_Select               =41,
    IK_Print                =42,
    IK_Execute              =43,
    IK_PrintScrn            =44,
    IK_Insert               =45,
    IK_Delete               =46,
    IK_Help                 =47,
    IK_0                    =48,
    IK_1                    =49,
    IK_2                    =50,
    IK_3                    =51,
    IK_4                    =52,
    IK_5                    =53,
    IK_6                    =54,
    IK_7                    =55,
    IK_8                    =56,
    IK_9                    =57,
    IK_Unknown3A            =58,
    IK_Unknown3B            =59,
    IK_Unknown3C            =60,
    IK_Unknown3D            =61,
    IK_Unknown3E            =62,
    IK_Unknown3F            =63,
    IK_Unknown40            =64,
    IK_A                    =65,
    IK_B                    =66,
    IK_C                    =67,
    IK_D                    =68,
    IK_E                    =69,
    IK_F                    =70,
    IK_G                    =71,
    IK_H                    =72,
    IK_I                    =73,
    IK_J                    =74,
    IK_K                    =75,
    IK_L                    =76,
    IK_M                    =77,
    IK_N                    =78,
    IK_O                    =79,
    IK_P                    =80,
    IK_Q                    =81,
    IK_R                    =82,
    IK_S                    =83,
    IK_T                    =84,
    IK_U                    =85,
    IK_V                    =86,
    IK_W                    =87,
    IK_X                    =88,
    IK_Y                    =89,
    IK_Z                    =90,
    IK_Unknown5B            =91,
    IK_Unknown5C            =92,
    IK_Unknown5D            =93,
    IK_Unknown5E            =94,
    IK_Unknown5F            =95,
    IK_NumPad0              =96,
    IK_NumPad1              =97,
    IK_NumPad2              =98,
    IK_NumPad3              =99,
    IK_NumPad4              =100,
    IK_NumPad5              =101,
    IK_NumPad6              =102,
    IK_NumPad7              =103,
    IK_NumPad8              =104,
    IK_NumPad9              =105,
    IK_GreyStar             =106,
    IK_GreyPlus             =107,
    IK_Separator            =108,
    IK_GreyMinus            =109,
    IK_NumPadPeriod         =110,
    IK_GreySlash            =111,
    IK_F1                   =112,
    IK_F2                   =113,
    IK_F3                   =114,
    IK_F4                   =115,
    IK_F5                   =116,
    IK_F6                   =117,
    IK_F7                   =118,
    IK_F8                   =119,
    IK_F9                   =120,
    IK_F10                  =121,
    IK_F11                  =122,
    IK_F12                  =123,
    IK_F13                  =124,
    IK_F14                  =125,
    IK_F15                  =126,
    IK_F16                  =127,
    IK_F17                  =128,
    IK_F18                  =129,
    IK_F19                  =130,
    IK_F20                  =131,
    IK_F21                  =132,
    IK_F22                  =133,
    IK_F23                  =134,
    IK_F24                  =135,
    IK_Unknown88            =136,
    IK_Unknown89            =137,
    IK_Unknown8A            =138,
    IK_Unknown8B            =139,
    IK_Unknown8C            =140,
    IK_Unknown8D            =141,
    IK_Unknown8E            =142,
    IK_Unknown8F            =143,
    IK_NumLock              =144,
    IK_ScrollLock           =145,
    IK_Unknown92            =146,
    IK_Unknown93            =147,
    IK_Unknown94            =148,
    IK_Unknown95            =149,
    IK_Unknown96            =150,
    IK_Unknown97            =151,
    IK_Unknown98            =152,
    IK_Unknown99            =153,
    IK_Unknown9A            =154,
    IK_Unknown9B            =155,
    IK_Unknown9C            =156,
    IK_Unknown9D            =157,
    IK_Unknown9E            =158,
    IK_Unknown9F            =159,
    IK_LShift               =160,
    IK_RShift               =161,
    IK_LControl             =162,
    IK_RControl             =163,
    IK_UnknownA4            =164,
    IK_UnknownA5            =165,
    IK_UnknownA6            =166,
    IK_UnknownA7            =167,
    IK_UnknownA8            =168,
    IK_UnknownA9            =169,
    IK_UnknownAA            =170,
    IK_UnknownAB            =171,
    IK_UnknownAC            =172,
    IK_UnknownAD            =173,
    IK_UnknownAE            =174,
    IK_UnknownAF            =175,
    IK_UnknownB0            =176,
    IK_UnknownB1            =177,
    IK_UnknownB2            =178,
    IK_UnknownB3            =179,
    IK_UnknownB4            =180,
    IK_UnknownB5            =181,
    IK_UnknownB6            =182,
    IK_UnknownB7            =183,
    IK_UnknownB8            =184,
    IK_UnknownB9            =185,
    IK_Semicolon            =186,
    IK_Equals               =187,
    IK_Comma                =188,
    IK_Minus                =189,
    IK_Period               =190,
    IK_Slash                =191,
    IK_Tilde                =192,
    IK_UnknownC1            =193,
    IK_UnknownC2            =194,
    IK_UnknownC3            =195,
    IK_UnknownC4            =196,
    IK_UnknownC5            =197,
    IK_UnknownC6            =198,
    IK_UnknownC7            =199,
    IK_Joy1                 =200,
    IK_Joy2                 =201,
    IK_Joy3                 =202,
    IK_Joy4                 =203,
    IK_Joy5                 =204,
    IK_Joy6                 =205,
    IK_Joy7                 =206,
    IK_Joy8                 =207,
    IK_Joy9                 =208,
    IK_Joy10                =209,
    IK_Joy11                =210,
    IK_Joy12                =211,
    IK_Joy13                =212,
    IK_Joy14                =213,
    IK_Joy15                =214,
    IK_Joy16                =215,
    IK_UnknownD8            =216,
    IK_UnknownD9            =217,
    IK_UnknownDA            =218,
    IK_LeftBracket          =219,
    IK_Backslash            =220,
    IK_RightBracket         =221,
    IK_SingleQuote          =222,
    IK_UnknownDF            =223,
    IK_JoyX                 =224,
    IK_JoyY                 =225,
    IK_JoyZ                 =226,
    IK_JoyR                 =227,
    IK_MouseX               =228,
    IK_MouseY               =229,
    IK_MouseZ               =230,
    IK_MouseW               =231,
    IK_JoyU                 =232,
    IK_JoyV                 =233,
    IK_UnknownEA            =234,
    IK_UnknownEB            =235,
    IK_MouseWheelUp         =236,
    IK_MouseWheelDown       =237,
    IK_Unknown10E           =238,
    UK_Unknown10F           =239,
    IK_JoyPovUp             =240,
    IK_JoyPovDown           =241,
    IK_JoyPovLeft           =242,
    IK_JoyPovRight          =243,
    IK_UnknownF4            =244,
    IK_UnknownF5            =245,
    IK_Attn                 =246,
    IK_CrSel                =247,
    IK_ExSel                =248,
    IK_ErEof                =249,
    IK_Play                 =250,
    IK_Zoom                 =251,
    IK_NoName               =252,
    IK_PA1                  =253,
    IK_OEMClear             =254,
    IK_MAX                  =255,
};
enum EInputAction
{
    IST_None                =0,
    IST_Press               =1,
    IST_Hold                =2,
    IST_Release             =3,
    IST_Axis                =4,
    IST_MAX                 =5,
};
enum ETravelType
{
    TRAVEL_Absolute         =0,
    TRAVEL_Partial          =1,
    TRAVEL_Relative         =2,
    TRAVEL_MAX              =3,
};
enum EDodgeDir
{
    DODGE_None              =0,
    DODGE_Left              =1,
    DODGE_Right             =2,
    DODGE_Forward           =3,
    DODGE_Back              =4,
    DODGE_Active            =5,
    DODGE_Done              =6,
    DODGE_MAX               =7,
};
enum ELightEffect
{
    LE_None                 =0,
    LE_TorchWaver           =1,
    LE_FireWaver            =2,
    LE_WateryShimmer        =3,
    LE_Searchlight          =4,
    LE_SlowWave             =5,
    LE_FastWave             =6,
    LE_CloudCast            =7,
    LE_StaticSpot           =8,
    LE_Shock                =9,
    LE_Disco                =10,
    LE_Warp                 =11,
    LE_Spotlight            =12,
    LE_NonIncidence         =13,
    LE_Shell                =14,
    LE_OmniBumpMap          =15,
    LE_Interference         =16,
    LE_Cylinder             =17,
    LE_Rotor                =18,
    LE_Unused               =19,
    LE_MAX                  =20,
};
enum ELightType
{
    LT_None                 =0,
    LT_Steady               =1,
    LT_Pulse                =2,
    LT_Blink                =3,
    LT_Flicker              =4,
    LT_Strobe               =5,
    LT_BackdropLight        =6,
    LT_SubtlePulse          =7,
    LT_TexturePaletteOnce   =8,
    LT_TexturePaletteLoop   =9,
    LT_MAX                  =10,
};
enum EMusicTransition
{
    MTRAN_None              =0,
    MTRAN_Instant           =1,
    MTRAN_Segue             =2,
    MTRAN_Fade              =3,
    MTRAN_FastFade          =4,
    MTRAN_SlowFade          =5,
    MTRAN_MAX               =6,
};
enum ESoundSlot
{
    SLOT_None               =0,
    SLOT_Misc               =1,
    SLOT_Pain               =2,
    SLOT_Interact           =3,
    SLOT_Ambient            =4,
    SLOT_Talk               =5,
    SLOT_Interface          =6,
    SLOT_MAX                =7,
};
enum ELODCurve
{
    LOD_CURVE_NONE          =0,
    LOD_CURVE_ULTRA_CONSERVATIVE=1,
    LOD_CURVE_CONSERVATIVE  =2,
    LOD_CURVE_NORMAL        =3,
    LOD_CURVE_AGGRESSIVE    =4,
    LOD_CURVE_ULTRA_AGGRESSIVE=5,
    LOD_CURVE_TEST          =6,
    LOD_MAX                 =7,
};
enum ERenderStyle
{
    STY_None                =0,
    STY_Normal              =1,
    STY_Masked              =2,
    STY_Translucent         =3,
    STY_Modulated           =4,
    STY_AlphaBlend          =5,
    STY_MAX                 =6,
};
enum EDrawType
{
    DT_None                 =0,
    DT_Sprite               =1,
    DT_Mesh                 =2,
    DT_Brush                =3,
    DT_RopeSprite           =4,
    DT_VerticalSprite       =5,
    DT_SkeletalMesh         =6,
    DT_SpriteAnimOnce       =7,
    DT_ParticleSystem       =8,
    DT_MAX                  =9,
};
enum E_RMAlign
{
    RMALIGN_Left            =0,
    RMALIGN_Right           =1,
    RMALIGN_Center          =2,
    RMALIGN_None            =3,
    RMALIGN_MAX             =4,
};
enum ENetRole
{
    ROLE_None               =0,
    ROLE_DumbProxy          =1,
    ROLE_SimulatedProxy     =2,
    ROLE_AutonomousProxy    =3,
    ROLE_Authority          =4,
    ROLE_MAX                =5,
};
enum EPhysics
{
    PHYS_None               =0,
    PHYS_Walking            =1,
    PHYS_Falling            =2,
    PHYS_Swimming           =3,
    PHYS_Flying             =4,
    PHYS_Rotating           =5,
    PHYS_Projectile         =6,
    PHYS_Rolling            =7,
    PHYS_Interpolating      =8,
    PHYS_MovingBrush        =9,
    PHYS_Spider             =10,
    PHYS_Trailer            =11,
    PHYS_Sliding            =12,
    PHYS_MAX                =13,
};
#define UCONST_POLYFLAG_MODULATED 0x40
#define UCONST_POLYFLAG_ENVIRONMENT 0x10
#define UCONST_POLYFLAG_TRANSLUCENT 0x04
#define UCONST_POLYFLAG_MASKED 0x02
#define UCONST_POLYFLAG_INVISIBLE 0x01
#define UCONST_NUM_JOINT_FLAGS 8
#define UCONST_JOINT_FLAG_GRAVJOINT 0x80
#define UCONST_JOINT_FLAG_ABSROTATION 0x40
#define UCONST_JOINT_FLAG_ABSPOSITION 0x20
#define UCONST_JOINT_FLAG_COLLISION 0x10
#define UCONST_JOINT_FLAG_IKCHAIN 0x08
#define UCONST_JOINT_FLAG_SPRINGPOINT 0x04
#define UCONST_JOINT_FLAG_ACCELERATIVE 0x02
#define UCONST_JOINT_FLAG_BLENDJOINT 0x01
#define UCONST_NUM_BODYPARTS 15
#define UCONST_BODYPART_MISC4 	14
#define UCONST_BODYPART_MISC3 	13
#define UCONST_BODYPART_MISC2 	12
#define UCONST_BODYPART_MISC1 	11
#define UCONST_BODYPART_TORSO 	10
#define UCONST_BODYPART_RLEG2 	9
#define UCONST_BODYPART_RLEG1 	8
#define UCONST_BODYPART_LLEG2 	7
#define UCONST_BODYPART_LLEG1 	6
#define UCONST_BODYPART_HEAD 	5
#define UCONST_BODYPART_RARM2 	4
#define UCONST_BODYPART_RARM1 	3
#define UCONST_BODYPART_LARM2 	2
#define UCONST_BODYPART_LARM1 	1
#define UCONST_BODYPART_BODY 	0
#define UCONST_ANGLE_360 65535
#define UCONST_ANGLE_180 32768
#define UCONST_ANGLE_90 16384
#define UCONST_ANGLE_45 8192
#define UCONST_ANGLE_1 182
#define UCONST_HUD_NONE 9
#define UCONST_HUD_MAX 8
#define UCONST_HUD_NETWORK 	8
#define UCONST_HUD_SCRIPT 	7
#define UCONST_HUD_POV 	6
#define UCONST_HUD_LOD 	5
#define UCONST_HUD_SKELAXES 	4
#define UCONST_HUD_SKELJOINTS 	3
#define UCONST_HUD_SKELNAMES 	2
#define UCONST_HUD_SKELETON 	1
#define UCONST_HUD_ACTOR 	0
#define UCONST_DEBUG_MAX 	10
#define UCONST_DEBUG_TRIGGERS 	10
#define UCONST_DEBUG_NAVPOINTS 	9
#define UCONST_DEBUG_LIGHTS 	8
#define UCONST_DEBUG_VISIBLE 	7
#define UCONST_DEBUG_MULTIPLE 	7
#define UCONST_DEBUG_ZONE 	6
#define UCONST_DEBUG_LEVEL 	5
#define UCONST_DEBUG_PLAYER 	4
#define UCONST_DEBUG_AI 	3
#define UCONST_DEBUG_CONSTANT 	2
#define UCONST_DEBUG_TARGET 	1
#define UCONST_DEBUG_NONE 	0
#define UCONST_bDebug 	1

struct AActor_eventHandleConsoleCommand_Parms
{
    FString Cmd;
    INT ReturnValue;
};
struct AActor_eventRenderTexture_Parms
{
    class UScriptedTexture* Tex;
};
struct AActor_eventTravelPostAccept_Parms
{
};
struct AActor_eventTravelPreAccept_Parms
{
};
struct AActor_eventPostNetBeginPlay_Parms
{
};
struct AActor_eventSetInitialState_Parms
{
};
struct AActor_eventPostBeginPlay_Parms
{
};
struct AActor_eventBroadcastLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AActor_eventBroadcastMessage_Parms
{
    FString Msg;
    BITFIELD bBeep;
    FName Type;
};
struct AActor_eventPreBeginPlay_Parms
{
};
struct AActor_eventRenderOverlays_Parms
{
    class UCanvas* Canvas;
};
struct AActor_eventBeginPlay_Parms
{
};
struct AActor_eventPostTeleport_Parms
{
    class ATeleporter* OutTeleporter;
};
struct AActor_eventPreTeleport_Parms
{
    class ATeleporter* InTeleporter;
    BITFIELD ReturnValue;
};
struct AActor_eventDemoPlaySound_Parms
{
    class USound* Sound;
    BYTE Slot;
    FLOAT Volume;
    BITFIELD bNoOverride;
    FLOAT Radius;
    FLOAT Pitch;
};
struct AActor_eventTakeDamage_Parms
{
    INT Damage;
    class APawn* EventInstigator;
    FVector HitLocation;
    FVector Momentum;
    FName DamageType;
};
struct AActor_eventKilledBy_Parms
{
    class APawn* EventInstigator;
};
struct AActor_eventFellOutOfWorld_Parms
{
};
struct AActor_eventEndedRotation_Parms
{
};
struct AActor_eventInterpolateEnd_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachedBy_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachingOn_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AActor_eventSpecialHandling_Parms
{
    class APawn* Other;
    class AActor* ReturnValue;
};
struct AActor_eventKillCredit_Parms
{
    class AActor* Other;
};
struct AActor_eventDetach_Parms
{
    class AActor* Other;
};
struct AActor_eventAttach_Parms
{
    class AActor* Other;
};
struct AActor_eventBaseChange_Parms
{
};
struct AActor_eventBump_Parms
{
    class AActor* Other;
};
struct AActor_eventUnTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPostTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventZoneChange_Parms
{
    class AZoneInfo* NewZone;
};
struct AActor_eventLanded_Parms
{
    FVector HitNormal;
    class AActor* HitActor;
};
struct AActor_eventFalling_Parms
{
};
struct AActor_eventHitWall_Parms
{
    FVector HitNormal;
    class AActor* HitWall;
};
struct AActor_eventTimer_Parms
{
};
struct AActor_eventUseTrigger_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AActor_eventEndEvent_Parms
{
};
struct AActor_eventBeginEvent_Parms
{
};
struct AActor_eventUnTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventDestroyed_Parms
{
};
struct AActor_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct AActor_eventLostChild_Parms
{
    class AActor* Other;
};
struct AActor_eventGainedChild_Parms
{
    class AActor* Other;
};
struct AActor_eventExpired_Parms
{
};
struct AActor_eventSpawned_Parms
{
};
struct AActor_eventAnimProxyEnd_Parms
{
};
struct AActor_eventAnimEnd_Parms
{
};
struct AActor_eventJointDamaged_Parms
{
    INT Damage;
    class APawn* EventInstigator;
    FVector HitLoc;
    FVector Momentum;
    FName DamageType;
    INT joint;
    BITFIELD ReturnValue;
};
struct AActor_eventJointChangedDirection_Parms
{
    INT joint;
    FVector Direction;
    FVector PosOffset;
};
struct AActor_eventJointTouchedBy_Parms
{
    class AActor* Other;
    INT joint;
};
struct AActor_eventTouchJointOf_Parms
{
    class AActor* Other;
    INT joint;
};
struct AActor_eventGetAccelJointMagnitude_Parms
{
    INT joint;
    FLOAT ReturnValue;
};
struct AActor_eventGetAccelJointParms_Parms
{
    INT joint;
    FLOAT DampFactor;
    FLOAT RotThreshold;
};
struct AActor_eventGetSpringJointParms_Parms
{
    INT joint;
    FLOAT DampFactor;
    FLOAT SpringConstant;
    FVector SpringThreshold;
};
struct AActor_eventFrameNotify_Parms
{
    INT framepassed;
};
struct AActor_eventFrameSwept_Parms
{
    FVector B1;
    FVector E1;
    FVector B2;
    FVector E2;
};
class ENGINE_API AActor : public UObject
{
public:
    BITFIELD bStatic:1 GCC_PACK(4);
    BITFIELD bHidden:1;
    BITFIELD bNoDelete:1;
    BITFIELD bReleaseLock:1;
    BITFIELD bAnimFinished:1;
    BITFIELD bAnimLoop:1;
    BITFIELD bAnimNotify:1;
    BITFIELD bAnimByOwner:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bAssimilated:1;
    BITFIELD bTicked:1;
    BITFIELD bLightChanged:1;
    BITFIELD bDynamicLight:1;
    BITFIELD bTimerLoop:1;
    BITFIELD bRenderedLastFrame:1;
    BITFIELD bSpecialRender:1;
    BITFIELD bCanTeleport:1;
    BITFIELD bOwnerNoSee:1;
    BITFIELD bOnlyOwnerSee:1;
    BITFIELD bIsMover:1;
    BITFIELD bAlwaysRelevant:1;
    BITFIELD bAlwaysTick:1;
    BITFIELD bHighDetail:1;
    BITFIELD bStasis:1;
    BITFIELD bForceStasis:1;
    BITFIELD bIsPawn:1;
    BITFIELD bNetTemporary:1;
    BITFIELD bNetOptional:1;
    BITFIELD bReplicateInstigator:1;
    BITFIELD bTrailerSameRotation:1;
    BITFIELD bTrailerPrePivot:1;
    BITFIELD bClientAnim:1;
    BITFIELD bSimFall:1;
    BITFIELD bFrameNotifies:1;
    BITFIELD bLookFocusPlayer:1;
    BITFIELD bLookFocusCreature:1;
    BITFIELD bForceRender:1;
    BYTE Physics GCC_PACK(4);
    BYTE Role;
    BYTE RemoteRole;
    INT NetTag;
    class AActor* Owner;
    FName InitialState;
    FName Group;
    FLOAT TimerRate;
    FLOAT TimerCounter;
    FLOAT LifeSpan;
    FName AnimSequence;
    FLOAT AnimFrame;
    FLOAT AnimRate;
    FLOAT TweenRate;
    FLOAT LODBias;
    class ALevelInfo* Level;
    class ULevel* XLevel;
    FName Tag;
    FName Event;
    class AActor* Target;
    class APawn* Instigator;
    class AInventory* Inventory;
    class AActor* Base;
    BYTE BaseJoint;
    BYTE BaseMatterType;
    FVector BaseScrollDir;
    FPointRegion Region;
    FName AttachTag;
    BYTE StandingCount;
    BYTE MiscNumber;
    BYTE LatentByte;
    INT LatentInt;
    FLOAT LatentFloat;
    class AActor* LatentActor;
    class AActor* Touching[4];
    class AActor* Deleted;
    INT CollisionTag;
    INT LightingTag;
    INT OtherTag;
    INT ExtraTag;
    INT SpecialTag;
    FVector Location;
    FRotator Rotation;
    FVector OldLocation;
    FVector ColLocation;
    FVector Velocity;
    FVector Acceleration;
    FLOAT OddsOfAppearing;
    BITFIELD bHiddenEd:1 GCC_PACK(4);
    BITFIELD bDirectional:1;
    BITFIELD bSelected:1;
    BITFIELD bMemorized:1;
    BITFIELD bHighlighted:1;
    BITFIELD bEdLocked:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    BITFIELD bDifficulty0:1;
    BITFIELD bDifficulty1:1;
    BITFIELD bDifficulty2:1;
    BITFIELD bDifficulty3:1;
    BITFIELD bSinglePlayer:1;
    BITFIELD bNet:1;
    BITFIELD bNetSpecial:1;
    BYTE DrawType GCC_PACK(4);
    BYTE Style;
    class UTexture* Sprite;
    class UTexture* Texture;
    class UTexture* Skin;
    class UMesh* Mesh;
    BITFIELD bHasShadow:1 GCC_PACK(4);
    class UShadowTexture* ShadowTexture GCC_PACK(4);
    FVector ShadowVector;
    class UModel* Brush;
    FLOAT DrawScale;
    FVector PrePivot;
    FLOAT ScaleGlow;
    FLOAT VisibilityRadius;
    FLOAT VisibilityHeight;
    BYTE AmbientGlow;
    BYTE Fatness;
    FLOAT SpriteProjForward;
    FVector ColorAdjust;
    FVector DesiredColorAdjust;
    BYTE DesiredFatness;
    FLOAT AlphaScale;
    INT LODPolyCount;
    FLOAT LODDistMax;
    FLOAT LODDistMin;
    FLOAT LODPercentMin;
    FLOAT LODPercentMax;
    BYTE LODCurve;
    BITFIELD bUnlit:1 GCC_PACK(4);
    BITFIELD bPointLight:1;
    BITFIELD bMirrored:1;
    BITFIELD bNoSmooth:1;
    BITFIELD bParticles:1;
    BITFIELD bRandomFrame:1;
    BITFIELD bMeshEnviroMap:1;
    BITFIELD bMeshCurvy:1;
    BITFIELD bFilterByVolume:1;
    BITFIELD bPreLight:1;
    BITFIELD bComplexOcclusion:1;
    BITFIELD bShadowCast:1;
    BITFIELD bGameRelevant:1;
    BITFIELD bCarriedItem:1;
    BITFIELD bForcePhysicsUpdate:1;
    BITFIELD bIsSecretGoal:1;
    BITFIELD bIsKillGoal:1;
    BITFIELD bIsItemGoal:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bTravel:1;
    BITFIELD bMovable:1;
    class AActor* AttachParent GCC_PACK(4);
    BYTE AttachParentJoint;
    class UTexture* MultiSkins[8];
    BYTE SoundRadius;
    BYTE SoundVolume;
    BYTE SoundPitch;
    class USound* AmbientSound;
    FLOAT TransientSoundVolume;
    FLOAT TransientSoundRadius;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    BITFIELD bCollideActors:1 GCC_PACK(4);
    BITFIELD bCollideWorld:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bProjTarget:1;
    BITFIELD bJointsBlock:1;
    BITFIELD bJointsTouch:1;
    BITFIELD bSweepable:1;
    BYTE LightType GCC_PACK(4);
    BYTE LightEffect;
    BYTE LightBrightness;
    BYTE LightHue;
    BYTE LightSaturation;
    BYTE LightRadius;
    BYTE LightPeriod;
    BYTE LightPhase;
    BYTE LightCone;
    BYTE VolumeBrightness;
    BYTE VolumeRadius;
    BYTE VolumeFog;
    BITFIELD bSpecialLit:1 GCC_PACK(4);
    BITFIELD bSpecialLit2:1;
    BITFIELD bSpecialLit3:1;
    BITFIELD bActorShadows:1;
    BITFIELD bCorona:1;
    BITFIELD bLensFlare:1;
    BITFIELD bNegativeLight:1;
    BITFIELD bAffectWorld:1;
    BITFIELD bAffectActors:1;
    BITFIELD bBounce:1;
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotateToDesired:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    BYTE DodgeDir GCC_PACK(4);
    FLOAT Mass;
    FLOAT Buoyancy;
    FRotator RotationRate;
    FRotator DesiredRotation;
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    class AActor* PendingTouch;
    FLOAT AnimLast;
    FLOAT AnimMinRate;
    FLOAT OldAnimRate;
    FPlane SimAnim;
    FLOAT NetPriority;
    FLOAT NetUpdateFrequency;
    BITFIELD bNetInitial:1 GCC_PACK(4);
    BITFIELD bNetOwner:1;
    BITFIELD bNetRelevant:1;
    BITFIELD bNetSee:1;
    BITFIELD bNetHear:1;
    BITFIELD bNetFeel:1;
    BITFIELD bSimulatedPawn:1;
    BITFIELD bDemoRecording:1;
    BITFIELD bClientDemoRecording:1;
    BITFIELD bClientDemoNetFunc:1;
    BITFIELD bNoSurfaceBob:1;
    BITFIELD bDrawSkel:1;
    BITFIELD bDrawJoints:1;
    BITFIELD bDrawAxes:1;
    BITFIELD bApplyLagToAccelerators:1;
    BYTE SkelMesh GCC_PACK(4);
    class USkelModel* Skeletal;
    class USkelModel* SubstituteMesh;
    FLOAT BlendAnimAlpha;
    FLOAT BlendAnimFrame;
    FName BlendAnimSequence;
    class AAnimationProxy* AnimProxy;
    class UTexture* SkelGroupSkins[16];
    INT SkelGroupFlags[16];
    BYTE JointFlags[50];
    class AActor* JointChild[50];
    class UClass* RenderIteratorClass;
    class URenderIterator* RenderInterface;
    DECLARE_FUNCTION(execMultiply_ColorFloat);
    DECLARE_FUNCTION(execAdd_ColorColor);
    DECLARE_FUNCTION(execMultiply_FloatColor);
    DECLARE_FUNCTION(execSubtract_ColorColor);
    DECLARE_FUNCTION(execSweepActors);
    DECLARE_FUNCTION(execVisibleCollidingActors);
    DECLARE_FUNCTION(execVisibleActors);
    DECLARE_FUNCTION(execRadiusActors);
    DECLARE_FUNCTION(execTraceActors);
    DECLARE_FUNCTION(execTouchingActors);
    DECLARE_FUNCTION(execBasedActors);
    DECLARE_FUNCTION(execChildActors);
    DECLARE_FUNCTION(execAllActors);
    DECLARE_FUNCTION(execGetNextIntDesc);
    DECLARE_FUNCTION(execGetNextInt);
    DECLARE_FUNCTION(execGetURLMap);
    DECLARE_FUNCTION(execGetNextSkin);
    DECLARE_FUNCTION(execGetMapName);
    DECLARE_FUNCTION(execPlayerCanSeeMe);
    DECLARE_FUNCTION(execMakeNoise);
    DECLARE_FUNCTION(execGetSoundDuration);
    DECLARE_FUNCTION(execDemoPlaySound);
    DECLARE_FUNCTION(execStopAllSound);
    DECLARE_FUNCTION(execStopSound);
    DECLARE_FUNCTION(execPlayOwnedSound);
    DECLARE_FUNCTION(execPlaySound);
    DECLARE_FUNCTION(execLipSyncString);
    DECLARE_FUNCTION(execSetTimer);
    DECLARE_FUNCTION(execDestroy);
    DECLARE_FUNCTION(execSpawn);
    DECLARE_FUNCTION(execTraceTexture);
    DECLARE_FUNCTION(execFastTrace);
    DECLARE_FUNCTION(execTrace);
    DECLARE_FUNCTION(execSetPhysics);
    DECLARE_FUNCTION(execFinishInterpolation);
    DECLARE_FUNCTION(execHasAnim);
    DECLARE_FUNCTION(execFinishAnim);
    DECLARE_FUNCTION(execGetAnimGroup);
    DECLARE_FUNCTION(execIsAnimating);
    DECLARE_FUNCTION(execTweenAnim);
    DECLARE_FUNCTION(execLoopAnim);
    DECLARE_FUNCTION(execPlayAnim);
    DECLARE_FUNCTION(execSetOwner);
    DECLARE_FUNCTION(execSetBase);
    DECLARE_FUNCTION(execAutonomousPhysics);
    DECLARE_FUNCTION(execMoveSmooth);
    DECLARE_FUNCTION(execSetRotation);
    DECLARE_FUNCTION(execSetLocation);
    DECLARE_FUNCTION(execMove);
    DECLARE_FUNCTION(execSetCollisionSize);
    DECLARE_FUNCTION(execSetCollision);
    DECLARE_FUNCTION(execSleep);
    DECLARE_FUNCTION(execError);
    DECLARE_FUNCTION(execCalcArcVelocity);
    DECLARE_FUNCTION(execRelease);
    DECLARE_FUNCTION(execWaitForRelease);
    DECLARE_FUNCTION(execFrameSweep);
    DECLARE_FUNCTION(execSetJointRot);
    DECLARE_FUNCTION(execResetAnimationCache);
    DECLARE_FUNCTION(execJointNamed);
    DECLARE_FUNCTION(execClosestJointTo);
    DECLARE_FUNCTION(execActorAttachedTo);
    DECLARE_FUNCTION(execTurnJointTo);
    DECLARE_FUNCTION(execDetachActorFromJoint);
    DECLARE_FUNCTION(execAttachActorToJoint);
    DECLARE_FUNCTION(execSetDefaultJointFlags);
    DECLARE_FUNCTION(execSetDefaultPolygroups);
    DECLARE_FUNCTION(execNumJoints);
    DECLARE_FUNCTION(execApplyJointForce);
    DECLARE_FUNCTION(execGetJointName);
    DECLARE_FUNCTION(execGetJointRot);
    DECLARE_FUNCTION(execGetJointPos);
    DECLARE_FUNCTION(execConsoleCommand);
    INT eventHandleConsoleCommand(const FString& Cmd)
    {
        AActor_eventHandleConsoleCommand_Parms Parms;
        Parms.Cmd=Cmd;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_HandleConsoleCommand),&Parms);
        return Parms.ReturnValue;
    }
    void eventRenderTexture(class UScriptedTexture* Tex)
    {
        AActor_eventRenderTexture_Parms Parms;
        Parms.Tex=Tex;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderTexture),&Parms);
    }
    void eventTravelPostAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept),NULL);
    }
    void eventTravelPreAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept),NULL);
    }
    void eventPostNetBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetBeginPlay),NULL);
    }
    void eventSetInitialState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
    }
    void eventPostBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
    }
    void eventBroadcastLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        AActor_eventBroadcastLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedMessage),&Parms);
    }
    void eventBroadcastMessage(const FString& Msg, BITFIELD bBeep, FName Type)
    {
        AActor_eventBroadcastMessage_Parms Parms;
        Parms.Msg=Msg;
        Parms.bBeep=bBeep;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastMessage),&Parms);
    }
    void eventPreBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
    }
    void eventRenderOverlays(class UCanvas* Canvas)
    {
        AActor_eventRenderOverlays_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderOverlays),&Parms);
    }
    void eventBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
    }
    void eventPostTeleport(class ATeleporter* OutTeleporter)
    {
        AActor_eventPostTeleport_Parms Parms;
        Parms.OutTeleporter=OutTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&Parms);
    }
    BITFIELD eventPreTeleport(class ATeleporter* InTeleporter)
    {
        AActor_eventPreTeleport_Parms Parms;
        Parms.InTeleporter=InTeleporter;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
        return Parms.ReturnValue;
    }
    void eventDemoPlaySound(class USound* Sound, BYTE Slot, FLOAT Volume, BITFIELD bNoOverride, FLOAT Radius, FLOAT Pitch)
    {
        AActor_eventDemoPlaySound_Parms Parms;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.Volume=Volume;
        Parms.bNoOverride=bNoOverride;
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        ProcessEvent(FindFunctionChecked(ENGINE_DemoPlaySound),&Parms);
    }
    void eventTakeDamage(INT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, FName DamageType)
    {
        AActor_eventTakeDamage_Parms Parms;
        Parms.Damage=Damage;
        Parms.EventInstigator=EventInstigator;
        Parms.HitLocation=HitLocation;
        Parms.Momentum=Momentum;
        Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
    }
    void eventKilledBy(class APawn* EventInstigator)
    {
        AActor_eventKilledBy_Parms Parms;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&Parms);
    }
    void eventFellOutOfWorld()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld),NULL);
    }
    void eventEndedRotation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndedRotation),NULL);
    }
    void eventInterpolateEnd(class AActor* Other)
    {
        AActor_eventInterpolateEnd_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_InterpolateEnd),&Parms);
    }
    void eventEncroachedBy(class AActor* Other)
    {
        AActor_eventEncroachedBy_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachedBy),&Parms);
    }
    BITFIELD eventEncroachingOn(class AActor* Other)
    {
        AActor_eventEncroachingOn_Parms Parms;
        Parms.Other=Other;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachingOn),&Parms);
        return Parms.ReturnValue;
    }
    class AActor* eventSpecialHandling(class APawn* Other)
    {
        AActor_eventSpecialHandling_Parms Parms;
        Parms.Other=Other;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialHandling),&Parms);
        return Parms.ReturnValue;
    }
    void eventKillCredit(class AActor* Other)
    {
        AActor_eventKillCredit_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_KillCredit),&Parms);
    }
    void eventDetach(class AActor* Other)
    {
        AActor_eventDetach_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach),&Parms);
    }
    void eventAttach(class AActor* Other)
    {
        AActor_eventAttach_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach),&Parms);
    }
    void eventBaseChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BaseChange),NULL);
    }
    void eventBump(class AActor* Other)
    {
        AActor_eventBump_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump),&Parms);
    }
    void eventUnTouch(class AActor* Other)
    {
        AActor_eventUnTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch),&Parms);
    }
    void eventPostTouch(class AActor* Other)
    {
        AActor_eventPostTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTouch),&Parms);
    }
    void eventTouch(class AActor* Other)
    {
        AActor_eventTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch),&Parms);
    }
    void eventZoneChange(class AZoneInfo* NewZone)
    {
        AActor_eventZoneChange_Parms Parms;
        Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange),&Parms);
    }
    void eventLanded(FVector HitNormal, class AActor* HitActor)
    {
        AActor_eventLanded_Parms Parms;
        Parms.HitNormal=HitNormal;
        Parms.HitActor=HitActor;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed),&Parms);
    }
    void eventFalling()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Falling),NULL);
    }
    void eventHitWall(FVector HitNormal, class AActor* HitWall)
    {
        AActor_eventHitWall_Parms Parms;
        Parms.HitNormal=HitNormal;
        Parms.HitWall=HitWall;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall),&Parms);
    }
    void eventTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Timer),NULL);
    }
    BITFIELD eventUseTrigger(class AActor* Other)
    {
        AActor_eventUseTrigger_Parms Parms;
        Parms.Other=Other;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_UseTrigger),&Parms);
        return Parms.ReturnValue;
    }
    void eventEndEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
    }
    void eventBeginEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
    }
    void eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventUnTrigger_Parms Parms;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger),&Parms);
    }
    void eventTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTrigger_Parms Parms;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger),&Parms);
    }
    void eventDestroyed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Destroyed),NULL);
    }
    void eventTick(FLOAT DeltaTime)
    {
        AActor_eventTick_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
    }
    void eventLostChild(class AActor* Other)
    {
        AActor_eventLostChild_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild),&Parms);
    }
    void eventGainedChild(class AActor* Other)
    {
        AActor_eventGainedChild_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild),&Parms);
    }
    void eventExpired()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Expired),NULL);
    }
    void eventSpawned()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Spawned),NULL);
    }
    void eventAnimProxyEnd()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AnimProxyEnd),NULL);
    }
    void eventAnimEnd()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEnd),NULL);
    }
    BITFIELD eventJointDamaged(INT Damage, class APawn* EventInstigator, FVector HitLoc, FVector Momentum, FName DamageType, INT joint)
    {
        AActor_eventJointDamaged_Parms Parms;
        Parms.Damage=Damage;
        Parms.EventInstigator=EventInstigator;
        Parms.HitLoc=HitLoc;
        Parms.Momentum=Momentum;
        Parms.DamageType=DamageType;
        Parms.joint=joint;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_JointDamaged),&Parms);
        return Parms.ReturnValue;
    }
    void eventJointChangedDirection(INT joint, FVector Direction, FVector PosOffset)
    {
        AActor_eventJointChangedDirection_Parms Parms;
        Parms.joint=joint;
        Parms.Direction=Direction;
        Parms.PosOffset=PosOffset;
        ProcessEvent(FindFunctionChecked(ENGINE_JointChangedDirection),&Parms);
    }
    void eventJointTouchedBy(class AActor* Other, INT joint)
    {
        AActor_eventJointTouchedBy_Parms Parms;
        Parms.Other=Other;
        Parms.joint=joint;
        ProcessEvent(FindFunctionChecked(ENGINE_JointTouchedBy),&Parms);
    }
    void eventTouchJointOf(class AActor* Other, INT joint)
    {
        AActor_eventTouchJointOf_Parms Parms;
        Parms.Other=Other;
        Parms.joint=joint;
        ProcessEvent(FindFunctionChecked(ENGINE_TouchJointOf),&Parms);
    }
    FLOAT eventGetAccelJointMagnitude(INT joint)
    {
        AActor_eventGetAccelJointMagnitude_Parms Parms;
        Parms.joint=joint;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetAccelJointMagnitude),&Parms);
        return Parms.ReturnValue;
    }
    void eventGetAccelJointParms(INT joint, FLOAT& DampFactor, FLOAT& RotThreshold)
    {
        AActor_eventGetAccelJointParms_Parms Parms;
        Parms.joint=joint;
        Parms.DampFactor=DampFactor;
        Parms.RotThreshold=RotThreshold;
        ProcessEvent(FindFunctionChecked(ENGINE_GetAccelJointParms),&Parms);
        DampFactor=Parms.DampFactor;
        RotThreshold=Parms.RotThreshold;
    }
    void eventGetSpringJointParms(INT joint, FLOAT& DampFactor, FLOAT& SpringConstant, FVector& SpringThreshold)
    {
        AActor_eventGetSpringJointParms_Parms Parms;
        Parms.joint=joint;
        Parms.DampFactor=DampFactor;
        Parms.SpringConstant=SpringConstant;
        Parms.SpringThreshold=SpringThreshold;
        ProcessEvent(FindFunctionChecked(ENGINE_GetSpringJointParms),&Parms);
        DampFactor=Parms.DampFactor;
        SpringConstant=Parms.SpringConstant;
        SpringThreshold=Parms.SpringThreshold;
    }
    void eventFrameNotify(INT framepassed)
    {
        AActor_eventFrameNotify_Parms Parms;
        Parms.framepassed=framepassed;
        ProcessEvent(FindFunctionChecked(ENGINE_FrameNotify),&Parms);
    }
    void eventFrameSwept(FVector B1, FVector E1, FVector B2, FVector E2)
    {
        AActor_eventFrameSwept_Parms Parms;
        Parms.B1=B1;
        Parms.E1=E1;
        Parms.B2=B2;
        Parms.E2=E2;
        ProcessEvent(FindFunctionChecked(ENGINE_FrameSwept),&Parms);
    }
    DECLARE_CLASS(AActor,UObject,0,Engine)
    #include "AActor.h"
};

enum ECsgOper
{
    CSG_Active              =0,
    CSG_Add                 =1,
    CSG_Subtract            =2,
    CSG_Intersect           =3,
    CSG_Deintersect         =4,
    CSG_MAX                 =5,
};

class ENGINE_API ABrush : public AActor
{
public:
    BYTE CsgOper;
    class UObject* UnusedLightMesh;
    FVector PostPivot;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    INT PolyFlags;
    BITFIELD bColored:1 GCC_PACK(4);
    DECLARE_CLASS(ABrush,AActor,0,Engine)
    #include "ABrush.h"
};

enum EPolyObjBumpType
{
    PBT_PlayerBump          =0,
    PBT_PawnBump            =1,
    PBT_CreatureBump        =2,
    PBT_AnyBump             =3,
    PBT_MAX                 =4,
};
enum EPolyObjGlideType
{
    PGT_MoveByTime          =0,
    PGT_GlideByTime         =1,
    PGT_MAX                 =2,
};
enum EPolyObjEncroachType
{
    PET_StopWhenEncroach    =0,
    PET_ReturnWhenEncroach  =1,
    PET_CrushWhenEncroach   =2,
    PET_IgnoreWhenEncroach  =3,
    PET_MAX                 =4,
};
#define UCONST_CCUTOFF 0.3

class ENGINE_API APolyobj : public ABrush
{
public:
    BYTE PolyObjEncroachType;
    BYTE PolyObjGlideType;
    BYTE PolyObjBumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    FLOAT MoveTime[16];
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    FName InterpolateEvent[16];
    INT BumpDamage;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    FName PlayerBumpEvent GCC_PACK(4);
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class APolyobj* Leader;
    class APolyobj* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    class USound* OpeningSound;
    class USound* OpenedSound;
    class USound* ClosingSound;
    class USound* ClosedSound;
    class USound* MoveAmbientSound;
    FVector KeyPos[16];
    FRotator KeyRot[16];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    class ANavigationPoint* myMarker;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    class APawn* WaitingPawn;
    BITFIELD bOpening:1 GCC_PACK(4);
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bPlayerOnly:1;
    class ATrigger* RecommendedTrigger GCC_PACK(4);
    FVector SimOldPos;
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    BITFIELD bCanRender:1 GCC_PACK(4);
    BITFIELD bDynamicLightPolyobj:1;
    FVector CStartLocation GCC_PACK(4);
    FVector CHeightVect;
    FRotator CRotator;
    FLOAT CTimeCounter;
    FLOAT CPrevV;
    FLOAT CPulse;
    FLOAT CDelay;
    class AActor* CBase;
    FLOAT CCycleTime;
    FLOAT CPhase;
    FLOAT CHeight;
    FLOAT CSize;
    FLOAT CSpeed;
    class USound* CSound;
    BITFIELD flag1:1 GCC_PACK(4);
    BITFIELD flag2:1;
    FName CBaseName GCC_PACK(4);
    INT OnMeCount;
    class APawn* OnMeList[4];
    BITFIELD SinkResting:1 GCC_PACK(4);
    BITFIELD bInitiallyOn:1;
    FVector ThrustVector GCC_PACK(4);
    BYTE matter;
    class UClass* DebrisType;
    BITFIELD bDestroyable:1 GCC_PACK(4);
    INT NumDebrisChunks GCC_PACK(4);
    FLOAT DebrisSpawnRadius;
    class UTexture* DebrisTexture;
    DECLARE_FUNCTION(execGetTexture);
    DECLARE_FUNCTION(execGetCollisionRadius);
    DECLARE_CLASS(APolyobj,ABrush,0,Engine)
    #include "APolyobj.h"
};

enum EBumpType
{
    BT_PlayerBump           =0,
    BT_PawnBump             =1,
    BT_CreatureBump         =2,
    BT_AnyBump              =3,
    BT_MAX                  =4,
};
enum EMoverGlideType
{
    MV_MoveByTime           =0,
    MV_GlideByTime          =1,
    MV_MAX                  =2,
};
enum EMoverEncroachType
{
    ME_StopWhenEncroach     =0,
    ME_ReturnWhenEncroach   =1,
    ME_CrushWhenEncroach    =2,
    ME_IgnoreWhenEncroach   =3,
    ME_MAX                  =4,
};

class ENGINE_API AMover : public ABrush
{
public:
    BYTE MoverEncroachType;
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    FLOAT MoveTime[16];
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    FName InterpolateEvent[16];
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    FName PlayerBumpEvent GCC_PACK(4);
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class AMover* Leader;
    class AMover* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    class USound* OpeningSound;
    class USound* OpenedSound;
    class USound* ClosingSound;
    class USound* ClosedSound;
    class USound* MoveAmbientSound;
    FVector KeyPos[16];
    FRotator KeyRot[16];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    class ANavigationPoint* myMarker;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    class APawn* WaitingPawn;
    BITFIELD bOpening:1 GCC_PACK(4);
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bPlayerOnly:1;
    class ATrigger* RecommendedTrigger GCC_PACK(4);
    FVector SimOldPos;
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    DECLARE_CLASS(AMover,ABrush,0,Engine)
    #include "AMover.h"
};

enum EIntelligence
{
    BRAINS_NONE             =0,
    BRAINS_REPTILE          =1,
    BRAINS_MAMMAL           =2,
    BRAINS_HUMAN            =3,
    BRAINS_MAX              =4,
};
enum EAttitude
{
    ATTITUDE_Fear           =0,
    ATTITUDE_Hate           =1,
    ATTITUDE_Frenzy         =2,
    ATTITUDE_Threaten       =3,
    ATTITUDE_Ignore         =4,
    ATTITUDE_Friendly       =5,
    ATTITUDE_Follow         =6,
    ATTITUDE_MAX            =7,
};
enum ESpeedScale
{
    SS_Circular             =0,
    SS_Elliptical           =1,
    SS_Other                =2,
    SS_MAX                  =3,
};

struct APawn_eventPainTimer_Parms
{
};
struct APawn_eventAmbientSoundTimer_Parms
{
};
struct APawn_eventSpeechTimer_Parms
{
};
struct APawn_eventHeadZoneChange_Parms
{
    class AZoneInfo* newHeadZone;
};
struct APawn_eventFootZoneChange_Parms
{
    class AZoneInfo* newFootZone;
};
struct APawn_eventWalkTexture_Parms
{
    class UTexture* Texture;
    FVector StepLocation;
    FVector StepNormal;
};
struct APawn_eventGrabEdge_Parms
{
    FLOAT grabDistance;
    FVector grabNormal;
    BITFIELD ReturnValue;
};
struct APawn_eventLongFall_Parms
{
};
struct APawn_eventEnemyNotVisible_Parms
{
};
struct APawn_eventUpdateTactics_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventSeePlayer_Parms
{
    class AActor* Seen;
};
struct APawn_eventHearNoise_Parms
{
    FLOAT Loudness;
    class AActor* NoiseMaker;
};
struct APawn_eventAlterDestination_Parms
{
};
struct APawn_eventMayFall_Parms
{
};
struct APawn_eventClientHearSound_Parms
{
    class AActor* Actor;
    INT Id;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
};
struct APawn_eventReceiveLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct APawn_eventTeamMessage_Parms
{
    class APlayerReplicationInfo* PRI;
    FString S;
    FName Type;
    BITFIELD bBeep;
};
struct APawn_eventClientMessage_Parms
{
    FString S;
    FName Type;
    BITFIELD bBeep;
};
struct APawn_eventPlayerTimeout_Parms
{
};
struct APawn_eventShadowUpdate_Parms
{
    INT ShadowType;
};
class ENGINE_API APawn : public AActor
{
public:
    class UClass* CarcassType;
    BITFIELD bBehindView:1 GCC_PACK(4);
    BITFIELD bIsPlayer:1;
    BITFIELD bJustLanded:1;
    BITFIELD bUpAndOut:1;
    BITFIELD bIsWalking:1;
    BITFIELD bHitSlopedWall:1;
    BITFIELD bNeverSwitchOnPickup:1;
    BITFIELD bWarping:1;
    BITFIELD bUpdatingDisplay:1;
    BITFIELD bCanStrafe:1;
    BITFIELD bFixedStart:1;
    BITFIELD bReducedSpeed:1;
    BITFIELD bCanJump:1;
    BITFIELD bCanWalk:1;
    BITFIELD bCanSwim:1;
    BITFIELD bCanFly:1;
    BITFIELD bCanOpenDoors:1;
    BITFIELD bCanDoSpecial:1;
    BITFIELD bDrowning:1;
    BITFIELD bLOSflag:1;
    BITFIELD bFromWall:1;
    BITFIELD bHunting:1;
    BITFIELD bAvoidLedges:1;
    BITFIELD bStopAtLedges:1;
    BITFIELD bJumpOffPawn:1;
    BITFIELD bShootSpecial:1;
    BITFIELD bAutoActivate:1;
    BITFIELD bIsHuman:1;
    BITFIELD bIsFemale:1;
    BITFIELD bIsMultiSkinned:1;
    BITFIELD bCountJumps:1;
    BITFIELD bAdvancedTactics:1;
    BITFIELD bViewTarget:1;
    BITFIELD bCanGrabEdges:1;
    BITFIELD bAlignToFloor:1;
    FLOAT SightCounter GCC_PACK(4);
    FLOAT PainTime;
    FLOAT SpeechTime;
    FLOAT AmbientSoundTime;
    FLOAT AvgPhysicsTime;
    FPointRegion FootRegion;
    FPointRegion HeadRegion;
    FLOAT MoveTimer;
    class AActor* MoveTarget;
    class AActor* FaceTarget;
    FVector Destination;
    FVector Focus;
    FLOAT DesiredSpeed;
    FLOAT MaxDesiredSpeed;
    FLOAT MeleeRange;
    FLOAT CombatRange;
    BITFIELD bStopMoveIfCombatRange:1 GCC_PACK(4);
    FLOAT GroundSpeed GCC_PACK(4);
    FLOAT WaterSpeed;
    FLOAT AirSpeed;
    FLOAT AccelRate;
    FLOAT JumpZ;
    FLOAT MaxStepHeight;
    FLOAT AirControl;
    FLOAT WalkingSpeed;
    FLOAT MovementSpeed;
    BITFIELD bHurrying:1 GCC_PACK(4);
    BYTE SpeedScale GCC_PACK(4);
    INT ClassID;
    FLOAT MinHitWall;
    BYTE Visibility;
    FLOAT Alertness;
    FLOAT Stimulus;
    FLOAT SightRadius;
    FLOAT PeripheralVision;
    FLOAT HearingThreshold;
    FVector LastSeenPos;
    FVector LastSeeingPos;
    FLOAT LastSeenTime;
    class APawn* Enemy;
    class AWeapon* Weapon;
    class AShield* Shield;
    class AWeapon* PendingWeapon;
    class AInventory* SelectedItem;
    FName StartEvent;
    INT CurrentSkin;
    FRotator ViewRotation;
    FVector ViewLocation;
    FVector WalkBob;
    FLOAT BaseEyeHeight;
    FLOAT EyeHeight;
    FVector Floor;
    FLOAT SplashTime;
    FVector GrabLocationUp;
    FVector GrabLocationIn;
    FLOAT OrthoZoom;
    FLOAT FovAngle;
    INT DieCount;
    INT ItemCount;
    INT KillCount;
    INT SecretCount;
    INT Spree;
    INT Health;
    INT Strength;
    INT RunePower;
    INT MaxHealth;
    INT MaxStrength;
    INT MaxPower;
    INT BodyPartHealth[15];
    INT GibCount;
    class UClass* GibClass;
    FLOAT PainDelay;
    BITFIELD bGibbable:1 GCC_PACK(4);
    BITFIELD bInvisible:1;
    FStringNoInit SelectionMesh GCC_PACK(4);
    FStringNoInit SpecialMesh;
    FName ReducedDamageType;
    FLOAT ReducedDamagePct;
    class UClass* DropWhenKilled;
    FLOAT UnderWaterTime;
    BYTE AttitudeToPlayer;
    BYTE Intelligence;
    FLOAT Skill;
    class AActor* SpecialGoal;
    FLOAT SpecialPause;
    FVector noise1spot;
    FLOAT noise1time;
    class APawn* noise1other;
    FLOAT noise1loudness;
    FVector noise2spot;
    FLOAT noise2time;
    class APawn* noise2other;
    FLOAT noise2loudness;
    FLOAT LastPainSound;
    class APawn* nextPawn;
    class USound* HitSound1;
    class USound* HitSound2;
    class USound* HitSound3;
    class USound* Die;
    class USound* Die2;
    class USound* Die3;
    class USound* WaterStep;
    class USound* GibSound;
    FLOAT FootstepVolume;
    class USound* LandGrunt;
    class USound* FootStepWood[3];
    class USound* FootStepMetal[3];
    class USound* FootStepStone[3];
    class USound* FootStepFlesh[3];
    class USound* FootStepIce[3];
    class USound* FootStepEarth[3];
    class USound* FootStepSnow[3];
    class USound* FootStepBreakableWood[3];
    class USound* FootStepBreakableStone[3];
    class USound* FootStepWater[3];
    class USound* FootStepMud[3];
    class USound* FootStepLava[3];
    class USound* LandSoundWood;
    class USound* LandSoundMetal;
    class USound* LandSoundStone;
    class USound* LandSoundFlesh;
    class USound* LandSoundIce;
    class USound* LandSoundSnow;
    class USound* LandSoundEarth;
    class USound* LandSoundBreakableWood;
    class USound* LandSoundBreakableStone;
    class USound* LandSoundWater;
    class USound* LandSoundMud;
    class USound* LandSoundLava;
    BYTE bZoom;
    BYTE bRun;
    BYTE bLook;
    BYTE bDuck;
    BYTE bSnapLevel;
    BYTE bStrafe;
    BYTE bFire;
    BYTE bAltFire;
    BYTE bFreeLook;
    BYTE bExtra0;
    BYTE bExtra1;
    BYTE bExtra2;
    BYTE bExtra3;
    FLOAT CombatStyle;
    FName NextState;
    FName NextLabel;
    FName NextStateAfterPain;
    FLOAT SoundDampening;
    FLOAT DamageScaling;
    FName PlayerReStartState;
    FStringNoInit MenuName;
    FStringNoInit NameArticle;
    BYTE VoicePitch;
    FStringNoInit VoiceType;
    FLOAT OldMessageTime;
    FName WeaponJoint;
    FName ShieldJoint;
    FName StabJoint;
    class ANavigationPoint* RouteCache[16];
    class UClass* PlayerReplicationInfoClass;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class ADecal* shadow;
    BITFIELD bCanLook:1 GCC_PACK(4);
    FRotator MaxBodyAngle GCC_PACK(4);
    FRotator MaxHeadAngle;
    BITFIELD bRotateHead:1 GCC_PACK(4);
    BITFIELD bRotateTorso:1;
    BITFIELD bHeadLookUpDouble:1;
    FLOAT LookDegPerSec GCC_PACK(4);
    class AActor* LookTarget;
    FVector LookSpot;
    FRotator LookAngle;
    FRotator targetangle;
    BITFIELD bOverrideLookTarget:1 GCC_PACK(4);
    INT MouthRot GCC_PACK(4);
    INT DesiredMouthRot;
    INT MouthRotRate;
    INT MaxMouthRot;
    INT MaxMouthRotRate;
    class UClass* FootprintClass;
    class UClass* WetFootprintClass;
    class UClass* BloodyFootprintClass;
    INT LFootJoint;
    INT RFootJoint;
    BITFIELD bFootsteps:1 GCC_PACK(4);
    INT WaterSteps GCC_PACK(4);
    INT BloodSteps;
    BITFIELD bSwingingHigh:1 GCC_PACK(4);
    BITFIELD bSwingingLow:1;
    FLOAT DeathRadius GCC_PACK(4);
    FLOAT DeathHeight;
    BITFIELD bAllowStandOn:1 GCC_PACK(4);
    BITFIELD bLeadEnemy:1;
    FName UninterruptedAnim GCC_PACK(4);
    class AActor* UseActor;
    FStringNoInit SkinDefaultText;
    DECLARE_FUNCTION(execSkeletonLook);
    DECLARE_FUNCTION(execStopWaiting);
    DECLARE_FUNCTION(execFindWaterLine);
    DECLARE_FUNCTION(execPickAnyTarget);
    DECLARE_FUNCTION(execPickTarget);
    DECLARE_FUNCTION(execRemovePawn);
    DECLARE_FUNCTION(execAddPawn);
    DECLARE_FUNCTION(execFindBestInventoryPath);
    DECLARE_FUNCTION(execWaitForLanding);
    DECLARE_FUNCTION(execFindStairRotation);
    DECLARE_FUNCTION(execPickWallAdjust);
    DECLARE_FUNCTION(execCloserNavPointTo);
    DECLARE_FUNCTION(execNearestNavPoint);
    DECLARE_FUNCTION(execactorReachable);
    DECLARE_FUNCTION(execpointReachable);
    DECLARE_FUNCTION(execEAdjustJump);
    DECLARE_FUNCTION(execClearPaths);
    DECLARE_FUNCTION(execFindRandomDest);
    DECLARE_FUNCTION(execFindPathToward);
    DECLARE_FUNCTION(execFindPathTo);
    DECLARE_FUNCTION(execCanSee);
    DECLARE_FUNCTION(execLineOfSightTo);
    DECLARE_FUNCTION(execTurnToward);
    DECLARE_FUNCTION(execTurnTo);
    DECLARE_FUNCTION(execStrafeFacing);
    DECLARE_FUNCTION(execStrafeTo);
    DECLARE_FUNCTION(execMoveToward);
    DECLARE_FUNCTION(execMoveTo);
    DECLARE_FUNCTION(execClientHearSound);
    void eventPainTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PainTimer),NULL);
    }
    void eventAmbientSoundTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AmbientSoundTimer),NULL);
    }
    void eventSpeechTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SpeechTimer),NULL);
    }
    void eventHeadZoneChange(class AZoneInfo* newHeadZone)
    {
        APawn_eventHeadZoneChange_Parms Parms;
        Parms.newHeadZone=newHeadZone;
        ProcessEvent(FindFunctionChecked(ENGINE_HeadZoneChange),&Parms);
    }
    void eventFootZoneChange(class AZoneInfo* newFootZone)
    {
        APawn_eventFootZoneChange_Parms Parms;
        Parms.newFootZone=newFootZone;
        ProcessEvent(FindFunctionChecked(ENGINE_FootZoneChange),&Parms);
    }
    void eventWalkTexture(class UTexture* Texture, FVector StepLocation, FVector StepNormal)
    {
        APawn_eventWalkTexture_Parms Parms;
        Parms.Texture=Texture;
        Parms.StepLocation=StepLocation;
        Parms.StepNormal=StepNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_WalkTexture),&Parms);
    }
    BITFIELD eventGrabEdge(FLOAT grabDistance, FVector grabNormal)
    {
        APawn_eventGrabEdge_Parms Parms;
        Parms.grabDistance=grabDistance;
        Parms.grabNormal=grabNormal;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GrabEdge),&Parms);
        return Parms.ReturnValue;
    }
    void eventLongFall()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_LongFall),NULL);
    }
    void eventEnemyNotVisible()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EnemyNotVisible),NULL);
    }
    void eventUpdateTactics(FLOAT DeltaTime)
    {
        APawn_eventUpdateTactics_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateTactics),&Parms);
    }
    void eventUpdateEyeHeight(FLOAT DeltaTime)
    {
        APawn_eventUpdateEyeHeight_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateEyeHeight),&Parms);
    }
    void eventSeePlayer(class AActor* Seen)
    {
        APawn_eventSeePlayer_Parms Parms;
        Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeePlayer),&Parms);
    }
    void eventHearNoise(FLOAT Loudness, class AActor* NoiseMaker)
    {
        APawn_eventHearNoise_Parms Parms;
        Parms.Loudness=Loudness;
        Parms.NoiseMaker=NoiseMaker;
        ProcessEvent(FindFunctionChecked(ENGINE_HearNoise),&Parms);
    }
    void eventAlterDestination()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AlterDestination),NULL);
    }
    void eventMayFall()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MayFall),NULL);
    }
    void eventClientHearSound(class AActor* Actor, INT Id, class USound* S, FVector SoundLocation, FVector Parameters)
    {
        APawn_eventClientHearSound_Parms Parms;
        Parms.Actor=Actor;
        Parms.Id=Id;
        Parms.S=S;
        Parms.SoundLocation=SoundLocation;
        Parms.Parameters=Parameters;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientHearSound),&Parms);
    }
    void eventReceiveLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        APawn_eventReceiveLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveLocalizedMessage),&Parms);
    }
    void eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName Type, BITFIELD bBeep)
    {
        APawn_eventTeamMessage_Parms Parms;
        Parms.PRI=PRI;
        Parms.S=S;
        Parms.Type=Type;
        Parms.bBeep=bBeep;
        ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage),&Parms);
    }
    void eventClientMessage(const FString& S, FName Type, BITFIELD bBeep)
    {
        APawn_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.Type=Type;
        Parms.bBeep=bBeep;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    void eventPlayerTimeout()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTimeout),NULL);
    }
    void eventShadowUpdate(INT ShadowType)
    {
        APawn_eventShadowUpdate_Parms Parms;
        Parms.ShadowType=ShadowType;
        ProcessEvent(FindFunctionChecked(ENGINE_ShadowUpdate),&Parms);
    }
    DECLARE_CLASS(APawn,AActor,0|CLASS_Config,Engine)
    #include "APawn.h"
};


struct APlayerPawn_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct APlayerPawn_eventPlayerTick_Parms
{
    FLOAT Time;
};
struct APlayerPawn_eventUnPossess_Parms
{
};
struct APlayerPawn_eventPossess_Parms
{
};
struct APlayerPawn_eventPlayerInput_Parms
{
    FLOAT DeltaTime;
};
struct APlayerPawn_eventShowUpgradeMenu_Parms
{
};
struct APlayerPawn_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct APlayerPawn_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
struct APlayerPawn_eventPreClientTravel_Parms
{
};
struct APlayerPawn_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};
class ENGINE_API APlayerPawn : public APawn
{
public:
    class UPlayer* Player;
    FStringNoInit Password;
    FLOAT DodgeClickTimer;
    FLOAT DodgeClickTime;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    INT ShowFlags;
    INT RendMap;
    INT Misc1;
    INT Misc2;
    class AActor* ViewTarget;
    FVector FlashScale;
    FVector FlashFog;
    class AHUD* myHUD;
    class ADebugHUD* myDebugHUD;
    class AScoreBoard* Scoring;
    class UClass* HUDType;
    class UClass* ScoringType;
    FLOAT DesiredFlashScale;
    FLOAT ConstantGlowScale;
    FLOAT InstantFlash;
    FVector DesiredFlashFog;
    FVector ConstantGlowFog;
    FVector InstantFog;
    FLOAT DesiredFOV;
    FLOAT DefaultFOV;
    FLOAT HudTranslucency;
    class UMusic* Song;
    BYTE SongSection;
    BYTE CdTrack;
    BYTE Transition;
    FLOAT shaketimer;
    INT shakemag;
    FLOAT shakevert;
    FLOAT maxshake;
    FLOAT verttimer;
    FLOAT MyAutoAim;
    class USound* JumpSound;
    FLOAT AtrophyTimer;
    BITFIELD bBloodLust:1 GCC_PACK(4);
    FVector PolyColorAdjust GCC_PACK(4);
    FVector DesiredPolyColorAdjust;
    BITFIELD bClientSideAlpha:1 GCC_PACK(4);
    FLOAT ClientSideAlphaScale GCC_PACK(4);
    BYTE OldStyle;
    FLOAT OldScale;
    class AWeapon* StowSpot[3];
    BITFIELD bAdmin:1 GCC_PACK(4);
    BITFIELD bLookUpStairs:1;
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bWasForward:1;
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    BITFIELD bIsCrouching:1;
    BITFIELD bShakeDir:1;
    BITFIELD bAnimTransition:1;
    BITFIELD bIsTurning:1;
    BITFIELD bFrozen:1;
    BITFIELD bBadConnectionAlert:1;
    BITFIELD bInvertMouse:1;
    BITFIELD bShowScores:1;
    BITFIELD bShowMenu:1;
    BITFIELD bSpecialMenu:1;
    BITFIELD bWokeUp:1;
    BITFIELD bPressedJump:1;
    BITFIELD bUpdatePosition:1;
    BITFIELD bDelayedCommand:1;
    BITFIELD bRising:1;
    BITFIELD bReducedVis:1;
    BITFIELD bCenterView:1;
    BITFIELD bMaxMouseSmoothing:1;
    BITFIELD bMouseZeroed:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bNoFlash:1;
    BITFIELD bNoVoices:1;
    BITFIELD bMessageBeep:1;
    BITFIELD bZooming:1;
    BITFIELD bSinglePlayer:1;
    BITFIELD bJustFired:1;
    BITFIELD bJustAltFired:1;
    BITFIELD bIsTyping:1;
    BITFIELD bFixedCamera:1;
    BITFIELD bNeverAutoSwitch:1;
    BITFIELD bJumpStatus:1;
    BITFIELD bUpdating:1;
    BITFIELD bCheatsEnabled:1;
    BITFIELD bJustSpawned:1;
    FLOAT ZoomLevel GCC_PACK(4);
    FLOAT LevelFadeAlpha;
    class UClass* SpecialMenu;
    FStringNoInit DelayedCommand;
    FLOAT MouseSensitivity;
    FName WeaponPriority[20];
    FLOAT SmoothMouseX;
    FLOAT SmoothMouseY;
    FLOAT BorrowedMouseX;
    FLOAT BorrowedMouseY;
    FLOAT MouseSmoothThreshold;
    FLOAT MouseZeroTime;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aBaseZ;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    FLOAT aExtra4;
    FLOAT aExtra3;
    FLOAT aExtra2;
    FLOAT aExtra1;
    FLOAT aExtra0;
    class ASavedMove* SavedMoves;
    class ASavedMove* FreeMoves;
    class ASavedMove* PendingMove;
    FLOAT CurrentTimeStamp;
    FLOAT LastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FLOAT MaxTimeMargin;
    FStringNoInit ProgressMessage[8];
    FColor ProgressColor[8];
    FLOAT ProgressTimeOut;
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit ViewingFrom;
    FStringNoInit OwnCamera;
    FStringNoInit FailedView;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit ngWorldSecret;
    FRotator TargetViewRotation;
    FLOAT TargetEyeHeight;
    FVector TargetWeaponViewOffset;
    INT DemoViewPitch;
    INT DemoViewYaw;
    FLOAT LastPlaySound;
    DECLARE_FUNCTION(execPasteFromClipboard);
    DECLARE_FUNCTION(execCopyToClipboard);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execGetPlayerNetworkAddress);
    DECLARE_FUNCTION(execGetEntryLevel);
    DECLARE_FUNCTION(execGetDefaultURL);
    DECLARE_FUNCTION(execUpdateURL);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execClientTravel);
    void eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        APlayerPawn_eventPlayerCalcView_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    void eventPlayerTick(FLOAT Time)
    {
        APlayerPawn_eventPlayerTick_Parms Parms;
        Parms.Time=Time;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
    }
    void eventUnPossess()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UnPossess),NULL);
    }
    void eventPossess()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Possess),NULL);
    }
    void eventPlayerInput(FLOAT DeltaTime)
    {
        APlayerPawn_eventPlayerInput_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&Parms);
    }
    void eventShowUpgradeMenu()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ShowUpgradeMenu),NULL);
    }
    void eventPostRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventPreRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
    }
    void eventPreClientTravel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
    }
    void eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerPawn_eventClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
    }
    DECLARE_CLASS(APlayerPawn,APawn,0|CLASS_Config,Engine)
    #include "APlayerPawn.h"
};


class ENGINE_API ACamera : public APlayerPawn
{
public:
    DECLARE_CLASS(ACamera,APlayerPawn,0|CLASS_Config,Engine)
    #include "ACamera.h"
};


class ENGINE_API AScout : public APawn
{
public:
    DECLARE_CLASS(AScout,APawn,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AScout)
};


class ENGINE_API AKeypoint : public AActor
{
public:
    DECLARE_CLASS(AKeypoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};


class ENGINE_API AScriptDispatcher : public AKeypoint
{
public:
    FName LookTarget[12];
    FStringNoInit ControlMouth[12];
    FStringNoInit ControlHead[12];
    FLOAT ControlTimeGranularity;
    FSAction Actions[12];
    FName NextOrder;
    FName NextOrderTag;
    BITFIELD bWaitToBeTriggered:1 GCC_PACK(4);
    class APawn* WaitingScripter GCC_PACK(4);
    DECLARE_CLASS(AScriptDispatcher,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AScriptDispatcher)
};

enum ESndSelectMode
{
    SNDSM_Random            =0,
    SNDSM_Cycle             =1,
    SNDSM_MAX               =2,
};
enum ESndTriggerBehavior
{
    SNDTB_Nothing           =0,
    SNDTB_Single            =1,
    SNDTB_ContinuousOn      =2,
    SNDTB_ContinuousOnOff   =3,
    SNDTB_MAX               =4,
};

class ENGINE_API ASoundPlayer : public AKeypoint
{
public:
    BITFIELD bPlayerSound:1 GCC_PACK(4);
    BITFIELD bAutoContinuous:1;
    BITFIELD bRandomPosition:1;
    FLOAT RndPosHeight GCC_PACK(4);
    FLOAT RndPosRadius;
    BYTE RandomDelayMin;
    BYTE RandomDelayMax;
    BYTE RandomPercentPitch;
    BYTE RandomPercentVolume;
    class USound* TSound[4];
    BYTE TSoundPitch[4];
    FLOAT TSoundProbability[4];
    FLOAT TSoundRadius;
    BYTE TSoundVolume[4];
    INT TriggerCountdown;
    BYTE TriggerBehavior;
    BYTE SelectMode;
    INT SoundCount;
    INT SoundXLat[4];
    FLOAT AdjustedProbability[4];
    INT CSnd;
    FLOAT CSndDuration;
    FVector StartOffsetLocation;
    FVector RandomSize;
    INT SPMaxSize;
    INT CycleSound;
    DECLARE_CLASS(ASoundPlayer,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASoundPlayer)
};


class ENGINE_API AScriptAction : public AKeypoint
{
public:
    FName AnimToPlay;
    FLOAT PauseBeforeSound;
    class USound* SoundToPlay;
    FLOAT AnimTimeToLoop;
    FName NextOrder;
    FName NextOrderTag;
    BITFIELD bReleaseUponCompletion:1 GCC_PACK(4);
    BITFIELD bWaitToBeTriggered:1;
    BITFIELD bFireEventImmediately:1;
    BITFIELD bTurnToRotation:1;
    FStringNoInit ControlMouth GCC_PACK(4);
    FStringNoInit ControlTorso;
    FStringNoInit ControlHead;
    FLOAT ControlTimeGranularity;
    FName LookTarget;
    class APawn* WaitingScripter;
    DECLARE_CLASS(AScriptAction,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AScriptAction)
};


class ENGINE_API AAnimationProxy : public AKeypoint
{
public:
    class AWeapon* curWeapon;
    class AWeapon* NewWeapon;
    class AShield* curShield;
    class AShield* newShield;
    DECLARE_CLASS(AAnimationProxy,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAnimationProxy)
};


class ENGINE_API Alocationid : public AKeypoint
{
public:
    FStringNoInit LocationName;
    FLOAT Radius;
    class Alocationid* NextLocation;
    DECLARE_CLASS(Alocationid,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(Alocationid)
};


class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
    BITFIELD bInterpInstant:1 GCC_PACK(4);
    INT Position GCC_PACK(4);
    FLOAT RateModifier;
    FLOAT GameSpeedModifier;
    FLOAT FovModifier;
    BITFIELD bEndOfPath:1 GCC_PACK(4);
    BITFIELD bSkipNextPath:1;
    FLOAT ScreenFlashScale GCC_PACK(4);
    FVector ScreenFlashFog;
    BITFIELD bSplineThruPoints:1 GCC_PACK(4);
    class AInterpolationPoint* Prev GCC_PACK(4);
    class AInterpolationPoint* Next;
    DECLARE_CLASS(AInterpolationPoint,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInterpolationPoint)
};


struct ANavigationPoint_eventAccept_Parms
{
    class AActor* Incoming;
    class AActor* Source;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventSpecialCost_Parms
{
    class APawn* Seeker;
    INT ReturnValue;
};
class ENGINE_API ANavigationPoint : public AActor
{
public:
    FName ownerTeam;
    BITFIELD taken:1 GCC_PACK(4);
    INT upstreamPaths[16] GCC_PACK(4);
    INT Paths[16];
    INT PrunedPaths[16];
    class ANavigationPoint* VisNoReachPaths[16];
    INT visitedWeight;
    class AActor* RouteCache;
    INT bestPathWeight;
    class ANavigationPoint* nextNavigationPoint;
    class ANavigationPoint* nextOrdered;
    class ANavigationPoint* prevOrdered;
    class ANavigationPoint* startPath;
    class ANavigationPoint* previousPath;
    INT cost;
    INT ExtraCost;
    BITFIELD bPlayerOnly:1 GCC_PACK(4);
    BITFIELD bEndPoint:1;
    BITFIELD bEndPointOnly:1;
    BITFIELD bSpecialCost:1;
    BITFIELD bOneWayPath:1;
    BITFIELD bNeverUseStrafing:1;
    BITFIELD bAutoBuilt:1;
    BITFIELD bTwoWay:1;
    DECLARE_FUNCTION(execdescribeSpec);
    BITFIELD eventAccept(class AActor* Incoming, class AActor* Source)
    {
        ANavigationPoint_eventAccept_Parms Parms;
        Parms.Incoming=Incoming;
        Parms.Source=Source;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
        return Parms.ReturnValue;
    }
    INT eventSpecialCost(class APawn* Seeker)
    {
        ANavigationPoint_eventSpecialCost_Parms Parms;
        Parms.Seeker=Seeker;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ANavigationPoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANavigationPoint)
};


class ENGINE_API AAutoLink : public ANavigationPoint
{
public:
    FName LinkTag;
    DECLARE_CLASS(AAutoLink,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAutoLink)
};


class ENGINE_API ALiftExit : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT LastTriggerTime;
    DECLARE_CLASS(ALiftExit,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftExit)
};


class ENGINE_API ALiftCenter : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT LastTriggerTime;
    FLOAT MaxZDiffAdd;
    FLOAT MaxDist2D;
    FVector LiftOffset;
    DECLARE_CLASS(ALiftCenter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftCenter)
};


class ENGINE_API AWarpZoneMarker : public ANavigationPoint
{
public:
    class AWarpZoneInfo* markedWarpZone;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(AWarpZoneMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneMarker)
};


class ENGINE_API AButtonMarker : public ANavigationPoint
{
public:
    DECLARE_CLASS(AButtonMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AButtonMarker)
};


class ENGINE_API ATriggerMarker : public ANavigationPoint
{
public:
    DECLARE_CLASS(ATriggerMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggerMarker)
};


class ENGINE_API AInventorySpot : public ANavigationPoint
{
public:
    class AInventory* markedItem;
    DECLARE_CLASS(AInventorySpot,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInventorySpot)
};


class ENGINE_API APlayerStart : public ANavigationPoint
{
public:
    BYTE TeamNumber;
    BITFIELD bSinglePlayerStart:1 GCC_PACK(4);
    BITFIELD bCoopStart:1;
    BITFIELD bEnabled:1;
    BITFIELD bTeamOnly:1;
    DECLARE_CLASS(APlayerStart,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};


class ENGINE_API ATeleporter : public ANavigationPoint
{
public:
    FStringNoInit URL;
    FName ProductRequired;
    BITFIELD bChangesVelocity:1 GCC_PACK(4);
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    FVector TargetVelocity GCC_PACK(4);
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
    DECLARE_CLASS(ATeleporter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATeleporter)
};


class ENGINE_API APathNode : public ANavigationPoint
{
public:
    DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APathNode)
};


struct AHUD_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AHUD : public AActor
{
public:
    INT HudMode;
    INT Crosshair;
    class UClass* MainMenuType;
    FStringNoInit HUDConfigWindowType;
    FColor WhiteColor;
    class AMenu* MainMenu;
    class AMutator* HUDMutator;
    class APlayerPawn* PlayerOwner;
    void eventPostRender(class UCanvas* Canvas)
    {
        AHUD_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventPreRender(class UCanvas* Canvas)
    {
        AHUD_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
    }
    DECLARE_CLASS(AHUD,AActor,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AHUD)
};


class ENGINE_API ADebugHUD : public AHUD
{
public:
    FName ModeTable[11];
    class AActor* Watch;
    INT DebugMode;
    INT DebugHudMode;
    DECLARE_CLASS(ADebugHUD,AHUD,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADebugHUD)
};

enum EParticleSpawnShape
{
    PSHAPE_Ellipsoid        =0,
    PSHAPE_Line             =1,
    PSHAPE_MAX              =2,
};
enum EParticleSpriteType
{
    PSPRITE_Normal          =0,
    PSPRITE_Vertical        =1,
    PSPRITE_Flat            =2,
    PSPRITE_QuadUV          =3,
    PSPRITE_MAX             =4,
};
enum EParticleType
{
    PART_Emitter            =0,
    PART_SwipeEffect        =1,
    PART_Generic            =2,
    PART_Beam               =3,
    PART_MAX                =4,
};
#define UCONST_MAX_PARTICLE_COUNT 64

struct AParticleSystem_eventParticleTick_Parms
{
    FLOAT DeltaSeconds;
};
struct AParticleSystem_eventSystemTick_Parms
{
    FLOAT DeltaSeconds;
};
struct AParticleSystem_eventSystemInit_Parms
{
};
class ENGINE_API AParticleSystem : public AActor
{
public:
    BITFIELD IsLoaded:1 GCC_PACK(4);
    BITFIELD bSpriteInEditor:1;
    BITFIELD bSystemOneShot:1;
    BITFIELD bSystemTicks:1;
    BITFIELD bRelativeToSystem:1;
    BITFIELD bEventDeath:1;
    BYTE ParticleCount GCC_PACK(4);
    class UTexture* ParticleTexture[4];
    BITFIELD bRandomTexture:1 GCC_PACK(4);
    BYTE ParticleType GCC_PACK(4);
    BYTE ParticleSpriteType;
    BYTE SpawnShape;
    FLOAT RandomDelay;
    FLOAT SystemLifeSpan;
    FLOAT CurrentDelay;
    BYTE OldParticleCount;
    FCoords SystemCoords;
    BITFIELD HasValidCoords:1 GCC_PACK(4);
    FLOAT LastTime GCC_PACK(4);
    FLOAT CurrentTime;
    FParticle ParticleArray[64];
    FVector OriginOffset;
    FVector ShapeVector;
    FVector VelocityMin;
    FVector VelocityMax;
    FLOAT ScaleMin;
    FLOAT ScaleMax;
    FLOAT ScaleDeltaX;
    FLOAT ScaleDeltaY;
    FLOAT LifeSpanMin;
    FLOAT LifeSpanMax;
    BYTE AlphaStart;
    BYTE AlphaEnd;
    BYTE PercentOffset;
    BITFIELD bAlphaFade:1 GCC_PACK(4);
    BITFIELD bApplyGravity:1;
    FLOAT GravityScale GCC_PACK(4);
    BITFIELD bApplyZoneVelocity:1 GCC_PACK(4);
    FLOAT ZoneVelocityScale GCC_PACK(4);
    BITFIELD bWaterOnly:1 GCC_PACK(4);
    BITFIELD bOneShot:1;
    BITFIELD bConvergeX:1;
    BITFIELD bConvergeY:1;
    BITFIELD bConvergeZ:1;
    BITFIELD bConstrainToBounds:1;
    FLOAT SpawnDelay GCC_PACK(4);
    FLOAT SpawnOverTime;
    FLOAT TextureChangeTime;
    BYTE BaseJointIndex;
    BYTE OffsetJointIndex;
    FVector OldBaseLocation;
    FVector OldOffsetLocation;
    FLOAT SwipeSpeed;
    BYTE NumConPts;
    FLOAT BeamThickness;
    FLOAT BeamTextureScale;
    INT TargetJointIndex;
    FVector ConnectionPoint[32];
    FVector ConnectionOffset[32];
    BITFIELD bUseTargetLocation:1 GCC_PACK(4);
    FVector TargetLocation GCC_PACK(4);
    BITFIELD bEventSystemInit:1 GCC_PACK(4);
    BITFIELD bEventSystemTick:1;
    BITFIELD bEventParticleTick:1;
    BITFIELD bTaperStartPoint:1;
    BITFIELD bTaperEndPoint:1;
    void eventParticleTick(FLOAT DeltaSeconds)
    {
        AParticleSystem_eventParticleTick_Parms Parms;
        Parms.DeltaSeconds=DeltaSeconds;
        ProcessEvent(FindFunctionChecked(ENGINE_ParticleTick),&Parms);
    }
    void eventSystemTick(FLOAT DeltaSeconds)
    {
        AParticleSystem_eventSystemTick_Parms Parms;
        Parms.DeltaSeconds=DeltaSeconds;
        ProcessEvent(FindFunctionChecked(ENGINE_SystemTick),&Parms);
    }
    void eventSystemInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SystemInit),NULL);
    }
    DECLARE_CLASS(AParticleSystem,AActor,0,Engine)
    #include "AParticleSystem.h"
};


class ENGINE_API ATriggers : public AActor
{
public:
    DECLARE_CLASS(ATriggers,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggers)
};


class ENGINE_API ADispatcher : public ATriggers
{
public:
    FName OutEvents[8];
    FLOAT OutDelays[8];
    BITFIELD bIsLooping:1 GCC_PACK(4);
    INT i GCC_PACK(4);
    DECLARE_CLASS(ADispatcher,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADispatcher)
};

enum ETriggerType
{
    TT_PlayerProximity      =0,
    TT_PawnProximity        =1,
    TT_ClassProximity       =2,
    TT_AnyProximity         =3,
    TT_Shoot                =4,
    TT_Damage               =5,
    TT_Use                  =6,
    TT_Sight                =7,
    TT_MAX                  =8,
};

class ENGINE_API ATrigger : public ATriggers
{
public:
    BYTE TriggerType;
    FStringNoInit Message;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bInitiallyActive:1;
    class UClass* ClassProximityType GCC_PACK(4);
    FLOAT RepeatTriggerTime;
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    FLOAT SightDistance;
    FLOAT SightAngle;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATrigger)
};


struct AInventory_eventBotDesireability_Parms
{
    class APawn* Bot;
    FLOAT ReturnValue;
};
class ENGINE_API AInventory : public AActor
{
public:
    BYTE AutoSwitchPriority;
    BYTE InventoryGroup;
    BITFIELD bActivatable:1 GCC_PACK(4);
    BITFIELD bDisplayableInv:1;
    BITFIELD bActive:1;
    BITFIELD bSleepTouch:1;
    BITFIELD bHeldItem:1;
    BITFIELD bTossedOut:1;
    BITFIELD bExpireWhenTossed:1;
    BITFIELD bAmbientGlow:1;
    BITFIELD bInstantRespawn:1;
    BITFIELD bRotatingPickup:1;
    FStringNoInit PickupMessage GCC_PACK(4);
    FStringNoInit ItemName;
    FStringNoInit ItemArticle;
    FLOAT RespawnTime;
    FName PlayerLastTouched;
    FVector PlayerViewOffset;
    INT PlayerViewMesh;
    FLOAT PlayerViewScale;
    FLOAT BobDamping;
    FLOAT ExpireTime;
    INT PickupViewMesh;
    FLOAT PickupViewScale;
    INT ThirdPersonMesh;
    FLOAT ThirdPersonScale;
    class UTexture* StatusIcon;
    FName ProtectionType1;
    FName ProtectionType2;
    INT Charge;
    INT ArmorAbsorption;
    BITFIELD bIsAnArmor:1 GCC_PACK(4);
    INT AbsorptionPriority GCC_PACK(4);
    class AInventory* NextArmor;
    FLOAT MaxDesireability;
    class AInventorySpot* myMarker;
    BITFIELD bSteadyFlash3rd:1 GCC_PACK(4);
    BITFIELD bFirstFrame:1;
    BITFIELD bMuzzleFlashParticles:1;
    BITFIELD bToggleSteadyFlash:1;
    BITFIELD bSteadyToggle:1;
    BYTE FlashCount GCC_PACK(4);
    BYTE OldFlashCount;
    BYTE MuzzleFlashStyle;
    class UMesh* MuzzleFlashMesh;
    FLOAT MuzzleFlashScale;
    class UTexture* MuzzleFlashTexture;
    class USound* PickupSound;
    class USound* ActivateSound;
    class USound* DeActivateSound;
    class USound* RespawnSound;
    class USound* DropSound;
    class UTexture* Icon;
    FStringNoInit M_Activated;
    FStringNoInit M_Selected;
    FStringNoInit M_Deactivated;
    class UClass* PickupMessageClass;
    class UClass* ItemMessageClass;
    FLOAT eventBotDesireability(class APawn* Bot)
    {
        AInventory_eventBotDesireability_Parms Parms;
        Parms.Bot=Bot;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_BotDesireability),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AInventory,AActor,0,Engine)
    #include "AInventory.h"
};


class ENGINE_API APickup : public AInventory
{
public:
    class AInventory* Inv;
    INT NumCopies;
    BITFIELD bCanHaveMultipleCopies:1 GCC_PACK(4);
    BITFIELD bCanActivate:1;
    FStringNoInit ExpireMessage GCC_PACK(4);
    BITFIELD bAutoActivate:1 GCC_PACK(4);
    DECLARE_CLASS(APickup,AInventory,0,Engine)
    #include "APickup.h"
};

enum EMeleeType
{
    MELEE_SWORD             =0,
    MELEE_HAMMER            =1,
    MELEE_AXE               =2,
    MELEE_NON_STOW          =3,
    MELEE_MAX               =4,
};
#define UCONST_HitCount 16

struct AWeapon_eventPowerupStatusChanged_Parms
{
};
class ENGINE_API AWeapon : public AInventory
{
public:
    BYTE MeleeType;
    BITFIELD bWeaponStay:1 GCC_PACK(4);
    BITFIELD bCrouchTwoHands:1;
    BITFIELD bPoweredUp:1;
    BITFIELD bCanBePoweredUp:1;
    BITFIELD bPlayedDropSound:1;
    BITFIELD bClientPoweredUp:1;
    INT HitMatterSoundCount GCC_PACK(4);
    BYTE StowMesh;
    INT Damage;
    FName DamageType;
    FName ThrownDamageType;
    class UTexture* BloodTexture;
    INT rating;
    FLOAT WeaponSweepExtent;
    INT SweepJoint1;
    INT SweepJoint2;
    FLOAT ExtendedLength;
    INT RunePowerRequired;
    FLOAT RunePowerDuration;
    FStringNoInit PowerupMessage;
    BYTE StabMesh;
    INT TimerCount;
    FVector SweepVector;
    INT FrameOfAttackAnim;
    FVector gB1;
    FVector gE1;
    FVector gB2;
    FVector gE2;
    class AActor* StabbedActor;
    class AActor* LastThrower;
    class USound* ThroughAir[3];
    class USound* ThroughAirBerserk[3];
    class USound* HitFlesh[3];
    class USound* HitWood[3];
    class USound* HitStone[3];
    class USound* HitMetal[3];
    class USound* HitDirt[3];
    class USound* HitShield;
    class USound* HitWeapon;
    class USound* HitBreakableWood;
    class USound* HitBreakableStone;
    class USound* SheathSound;
    class USound* UnsheathSound;
    class USound* ThrownSoundLOOP;
    class USound* PowerUpSound;
    class USound* PoweredUpSoundLOOP;
    class USound* PoweredUpEndingSound;
    class USound* PoweredUpEndSound;
    FLOAT PitchDeviation;
    class UTexture* PowerupIcon;
    class UTexture* PowerupIconAnim;
    FVector lastpos1;
    FVector lastpos2;
    INT NumThroughAirSounds;
    INT NumThroughAirBerserkSounds;
    INT NumFleshSounds;
    INT NumWoodSounds;
    INT NumStoneSounds;
    INT NumMetalSounds;
    INT NumEarthSounds;
    FSwipeHit SwipeHits[16];
    class AWeaponSwipe* swipe;
    class UClass* SwipeClass;
    class UClass* PoweredUpSwipeClass;
    FName A_Idle;
    FName A_TurnLeft;
    FName A_TurnRight;
    FName A_Forward;
    FName A_Backward;
    FName A_Forward45Right;
    FName A_Forward45Left;
    FName A_Backward45Right;
    FName A_Backward45Left;
    FName A_StrafeRight;
    FName A_StrafeLeft;
    FName A_Jump;
    FName A_ForwardAttack;
    FName A_AttackA;
    FName A_AttackAReturn;
    FName A_AttackB;
    FName A_AttackBReturn;
    FName A_AttackC;
    FName A_AttackCReturn;
    FName A_AttackD;
    FName A_AttackDReturn;
    FName A_AttackStandA;
    FName A_AttackStandAReturn;
    FName A_AttackStandB;
    FName A_AttackStandBReturn;
    FName A_AttackBackupA;
    FName A_AttackBackupAReturn;
    FName A_AttackBackupB;
    FName A_AttackBackupBReturn;
    FName A_AttackStrafeRight;
    FName A_AttackStrafeLeft;
    FName A_JumpAttack;
    FName A_Throw;
    FName A_Powerup;
    FName A_Defend;
    FName A_DefendIdle;
    FName A_PainFront;
    FName A_PainBack;
    FName A_PainLeft;
    FName A_PainRight;
    FName A_PickupGroundLeft;
    FName A_PickupHighLeft;
    FName A_Taunt;
    FName A_PumpTrigger;
    FName A_LeverTrigger;
    void eventPowerupStatusChanged()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PowerupStatusChanged),NULL);
    }
    DECLARE_CLASS(AWeapon,AInventory,0,Engine)
    #include "AWeapon.h"
};


struct ASpawnNotify_eventSpawnNotification_Parms
{
    class AActor* A;
    class AActor* ReturnValue;
};
class ENGINE_API ASpawnNotify : public AActor
{
public:
    class UClass* ActorClass;
    class ASpawnNotify* Next;
    class AActor* eventSpawnNotification(class AActor* A)
    {
        ASpawnNotify_eventSpawnNotification_Parms Parms;
        Parms.A=A;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SpawnNotification),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ASpawnNotify,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASpawnNotify)
};


struct ADecal_eventUpdate_Parms
{
    class AActor* L;
};
class ENGINE_API ADecal : public AActor
{
public:
    INT MultiDecalLevel;
    FLOAT LastRenderedTime;
    BITFIELD bBloodyDecal:1 GCC_PACK(4);
    TArray<INT> SurfList GCC_PACK(4);
    DECLARE_FUNCTION(execDetachDecal);
    DECLARE_FUNCTION(execAttachDecal);
    void eventUpdate(class AActor* L)
    {
        ADecal_eventUpdate_Parms Parms;
        Parms.L=L;
        ProcessEvent(FindFunctionChecked(ENGINE_Update),&Parms);
    }
    DECLARE_CLASS(ADecal,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecal)
};


class ENGINE_API AInfo : public AActor
{
public:
    DECLARE_CLASS(AInfo,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInfo)
};


class ENGINE_API AReplicationInfo : public AInfo
{
public:
    DECLARE_CLASS(AReplicationInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AReplicationInfo)
};


class ENGINE_API AGameReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit GameName;
    FStringNoInit GameClass;
    BITFIELD bTeamGame:1 GCC_PACK(4);
    BITFIELD bClassicDeathMessages:1;
    BITFIELD bStopCountDown:1;
    INT RemainingTime GCC_PACK(4);
    INT ElapsedTime;
    INT RemainingMinute;
    FLOAT SecondCount;
    INT NumPlayers;
    INT SumFrags;
    FLOAT UpdateTimer;
    FStringNoInit ServerName;
    FStringNoInit ShortName;
    FStringNoInit AdminName;
    FStringNoInit AdminEmail;
    INT ServerRegion;
    FStringNoInit MOTDLine1;
    FStringNoInit MOTDLine2;
    FStringNoInit MOTDLine3;
    FStringNoInit MOTDLine4;
    FStringNoInit GameEndedComments;
    class APlayerReplicationInfo* PRIArray[32];
    DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,0|CLASS_Config,Engine)
    #include "AGameReplicationInfo.h"
};


class ENGINE_API APlayerReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit PlayerName;
    FStringNoInit OldName;
    INT PlayerID;
    FStringNoInit TeamName;
    BYTE Team;
    INT TeamID;
    FLOAT Score;
    FLOAT Deaths;
    class UClass* VoiceType;
    class ADecoration* HasFlag;
    INT Ping;
    BYTE PacketLoss;
    BITFIELD bIsFemale:1 GCC_PACK(4);
    BITFIELD bIsABot:1;
    BITFIELD bFeigningDeath:1;
    BITFIELD bIsSpectator:1;
    BITFIELD bWaitingPlayer:1;
    BITFIELD bAdmin:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bFirstBlood:1;
    class UTexture* TalkTexture GCC_PACK(4);
    class AZoneInfo* PlayerZone;
    class Alocationid* PlayerLocation;
    INT MaxSpree;
    INT HeadKills;
    INT StartTime;
    INT TimeAcc;
    DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0,Engine)
    #include "APlayerReplicationInfo.h"
};


struct AStatLog_eventLogGameSpecial2_Parms
{
    FString SpecialID;
    FString SpecialParam;
    FString SpecialParam2;
};
struct AStatLog_eventLogGameSpecial_Parms
{
    FString SpecialID;
    FString SpecialParam;
};
class ENGINE_API AStatLog : public AInfo
{
public:
    INT Context;
    BITFIELD bWorld:1 GCC_PACK(4);
    FLOAT TimeStamp GCC_PACK(4);
    FStringNoInit LocalStandard;
    FStringNoInit WorldStandard;
    FStringNoInit LogVersion;
    FStringNoInit LogInfoURL;
    FStringNoInit GameName;
    FStringNoInit GameCreator;
    FStringNoInit GameCreatorURL;
    FStringNoInit DecoderRingURL;
    FStringNoInit LocalBatcherURL;
    FStringNoInit LocalBatcherParams;
    FStringNoInit LocalStatsURL;
    FStringNoInit WorldBatcherURL;
    FStringNoInit WorldBatcherParams;
    FStringNoInit WorldStatsURL;
    FStringNoInit LocalLogDir;
    FStringNoInit WorldLogDir;
    DECLARE_FUNCTION(execGetMapFileName);
    DECLARE_FUNCTION(execGetGMTRef);
    DECLARE_FUNCTION(execGetPlayerChecksum);
    DECLARE_FUNCTION(execLogMutator);
    DECLARE_FUNCTION(execInitialCheck);
    DECLARE_FUNCTION(execBrowseRelativeLocalURL);
    DECLARE_FUNCTION(execExecuteWorldLogBatcher);
    DECLARE_FUNCTION(execBatchLocal);
    DECLARE_FUNCTION(execExecuteSilentLogBatcher);
    DECLARE_FUNCTION(execExecuteLocalLogBatcher);
    void eventLogGameSpecial2(const FString& SpecialID, const FString& SpecialParam, const FString& SpecialParam2)
    {
        AStatLog_eventLogGameSpecial2_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        Parms.SpecialParam2=SpecialParam2;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial2),&Parms);
    }
    void eventLogGameSpecial(const FString& SpecialID, const FString& SpecialParam)
    {
        AStatLog_eventLogGameSpecial_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial),&Parms);
    }
    DECLARE_CLASS(AStatLog,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLog)
};


class ENGINE_API AStatLogFile : public AStatLog
{
public:
    BITFIELD bWatermark:1 GCC_PACK(4);
    INT LogAr GCC_PACK(4);
    FStringNoInit StatLogFile;
    FStringNoInit StatLogFinal;
    DECLARE_FUNCTION(execFileLog);
    DECLARE_FUNCTION(execFileFlush);
    DECLARE_FUNCTION(execGetChecksum);
    DECLARE_FUNCTION(execWatermark);
    DECLARE_FUNCTION(execCloseLog);
    DECLARE_FUNCTION(execOpenLog);
    DECLARE_CLASS(AStatLogFile,AStatLog,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLogFile)
};


class ENGINE_API AInternetInfo : public AInfo
{
public:
    DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};


class ENGINE_API ASavedMove : public AInfo
{
public:
    class ASavedMove* NextMove;
    FLOAT TimeStamp;
    FLOAT Delta;
    BITFIELD bRun:1 GCC_PACK(4);
    BITFIELD bDuck:1;
    BITFIELD bPressedJump:1;
    BITFIELD bFire:1;
    BITFIELD bAltFire:1;
    BITFIELD bForceFire:1;
    BITFIELD bForceAltFire:1;
    BYTE DodgeMove GCC_PACK(4);
    DECLARE_CLASS(ASavedMove,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASavedMove)
};


struct AZoneInfo_eventActorLeaving_Parms
{
    class AActor* Other;
};
struct AZoneInfo_eventActorEntered_Parms
{
    class AActor* Other;
};
class ENGINE_API AZoneInfo : public AInfo
{
public:
    FName ZoneTag;
    FVector ZoneGravity;
    FVector ZoneVelocity;
    FLOAT ZoneGroundFriction;
    FLOAT ZoneFluidFriction;
    FLOAT ZoneTerminalVelocity;
    FName ZonePlayerEvent;
    FName ZonePlayerExitEvent;
    FName ZonePlayerDiedEvent;
    INT ZonePlayerCount;
    INT NumCarcasses;
    INT DamagePerSec;
    FName DamageType;
    FStringNoInit DamageString;
    FStringNoInit ZoneName;
    class Alocationid* locationid;
    INT MaxCarcasses;
    class USound* EntrySound;
    class USound* EntrySoundBig;
    class USound* ExitSound;
    class UClass* EntryActor;
    class UClass* ExitActor;
    BITFIELD bTakeOverCamera:1 GCC_PACK(4);
    FLOAT MaxCameraDist GCC_PACK(4);
    FName SkyZoneName;
    class ASkyZoneInfo* SkyZone;
    BITFIELD bBounceVelocity:1 GCC_PACK(4);
    BITFIELD bWaterZone:1;
    BITFIELD bFogZone:1;
    BITFIELD bFarClipZone:1;
    BITFIELD bKillZone:1;
    BITFIELD bNeutralZone:1;
    BITFIELD bGravityZone:1;
    BITFIELD bPainZone:1;
    BITFIELD bDestructive:1;
    BITFIELD bNoInventory:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bLokiBloodZone:1;
    BYTE AmbientBrightness GCC_PACK(4);
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    BYTE FogBrightness;
    BYTE FogHue;
    BYTE FogSaturation;
    FLOAT FogDistance;
    class UTexture* EnvironmentMap;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    FVector ViewFlash;
    FVector ViewFog;
    BITFIELD bReverbZone:1 GCC_PACK(4);
    BITFIELD bRaytraceReverb:1;
    FLOAT SpeedOfSound GCC_PACK(4);
    BYTE MasterGain;
    INT CutoffHz;
    BYTE Delay[6];
    BYTE Gain[6];
    class UTexture* LensFlare[12];
    FLOAT LensFlareOffset[12];
    FLOAT LensFlareScale[12];
    BYTE MinLightCount;
    BYTE MaxLightCount;
    INT MinLightingPolyCount;
    INT MaxLightingPolyCount;
    DECLARE_FUNCTION(execZoneActors);
    void eventActorLeaving(class AActor* Other)
    {
        AZoneInfo_eventActorLeaving_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
    }
    void eventActorEntered(class AActor* Other)
    {
        AZoneInfo_eventActorEntered_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
    }
    DECLARE_CLASS(AZoneInfo,AInfo,0,Engine)
    #include "AZoneInfo.h"
};


struct AWarpZoneInfo_eventForceGenerate_Parms
{
};
struct AWarpZoneInfo_eventGenerate_Parms
{
};
class ENGINE_API AWarpZoneInfo : public AZoneInfo
{
public:
    FStringNoInit OtherSideURL;
    FName ThisTag;
    BITFIELD bNoTeleFrag:1 GCC_PACK(4);
    INT iWarpZone GCC_PACK(4);
    FCoords WarpCoords;
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    FStringNoInit Destinations[8];
    INT numDestinations;
    DECLARE_FUNCTION(execUnWarp);
    DECLARE_FUNCTION(execWarp);
    void eventForceGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
    }
    void eventGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
    }
    DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneInfo)
};


class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
    DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

enum ENetMode
{
    NM_Standalone           =0,
    NM_DedicatedServer      =1,
    NM_ListenServer         =2,
    NM_Client               =3,
    NM_MAX                  =4,
};
enum ELevelAction
{
    LEVACT_None             =0,
    LEVACT_Loading          =1,
    LEVACT_Saving           =2,
    LEVACT_Connecting       =3,
    LEVACT_Precaching       =4,
    LEVACT_MAX              =5,
};

struct ALevelInfo_eventServerTravel_Parms
{
    FString URL;
    BITFIELD bItems;
};
class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
    FLOAT TimeDilation;
    FLOAT TimeSeconds;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    FStringNoInit Pauser;
    class ULevelSummary* Summary;
    BITFIELD bLonePlayer:1 GCC_PACK(4);
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BITFIELD bHighDetailMode:1;
    BITFIELD bDropDetail:1;
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bHumansOnly:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    BITFIELD bFadeIn:1;
    FLOAT FadeRate GCC_PACK(4);
    class UMusic* Song;
    BYTE SongSection;
    BYTE CdTrack;
    FLOAT CdTrackLength;
    FLOAT PlayerDoppler;
    FLOAT Brightness;
    class UTexture* Screenshot;
    class UTexture* DefaultTexture;
    INT HubStackLevel;
    BYTE LevelAction;
    BITFIELD bNeverPrecache:1 GCC_PACK(4);
    BYTE NetMode GCC_PACK(4);
    FStringNoInit ComputerName;
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    FStringNoInit GameVersion;
    FStringNoInit BuildNumber;
    class UClass* DefaultGameType;
    class AGameInfo* Game;
    class ANavigationPoint* NavigationPointList;
    class APawn* PawnList;
    FStringNoInit NextURL;
    BITFIELD bNextItems:1 GCC_PACK(4);
    FLOAT NextSwitchCountdown GCC_PACK(4);
    INT AIProfile[8];
    FLOAT AvgAITime;
    BITFIELD bCheckWalkSurfaces:1 GCC_PACK(4);
    class ASpawnNotify* SpawnNotify GCC_PACK(4);
    DECLARE_FUNCTION(execGetAddressURL);
    DECLARE_FUNCTION(execGetLocalURL);
    void eventServerTravel(const FString& URL, BITFIELD bItems)
    {
        ALevelInfo_eventServerTravel_Parms Parms;
        Parms.URL=URL;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
    }
    DECLARE_CLASS(ALevelInfo,AZoneInfo,0,Engine)
    #include "ALevelInfo.h"
};


struct AGameInfo_eventAcceptInventory_Parms
{
    class APawn* PlayerPawn;
};
struct AGameInfo_eventPostLogin_Parms
{
    class APlayerPawn* NewPlayer;
};
struct AGameInfo_eventLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class UClass* SpawnClass;
    class APlayerPawn* ReturnValue;
};
struct AGameInfo_eventPreLogin_Parms
{
    FString Options;
    FString Address;
    FString Error;
    FString FailCode;
};
struct AGameInfo_eventGetBeaconText_Parms
{
    FString ReturnValue;
};
struct AGameInfo_eventInitGame_Parms
{
    FString Options;
    FString Error;
};
struct AGameInfo_eventDetailChange_Parms
{
};
struct AGameInfo_eventGameEnding_Parms
{
};
class ENGINE_API AGameInfo : public AInfo
{
public:
    INT ItemGoals;
    INT KillGoals;
    INT SecretGoals;
    BYTE Difficulty;
    BITFIELD bNoMonsters:1 GCC_PACK(4);
    BITFIELD bMuteSpectators:1;
    BITFIELD bHumansOnly:1;
    BITFIELD bRestartLevel:1;
    BITFIELD bPauseable:1;
    BITFIELD bCoopWeaponMode:1;
    BITFIELD bClassicDeathMessages:1;
    BITFIELD bLowGore:1;
    BITFIELD bCanChangeSkin:1;
    BITFIELD bTeamGame:1;
    BITFIELD bVeryLowGore:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    BITFIELD bDeathMatch:1;
    BITFIELD bGameEnded:1;
    BITFIELD bOverTime:1;
    BITFIELD bAlternateMode:1;
    BITFIELD bCanViewOthers:1;
    BITFIELD bAllowWeaponDrop:1;
    BITFIELD bAllowShieldDrop:1;
    BITFIELD bAutoPickup:1;
    FLOAT AutoAim GCC_PACK(4);
    FLOAT GameSpeed;
    FLOAT StartTime;
    class UClass* DefaultPlayerClass;
    class UClass* DefaultWeapon;
    class UClass* DefaultShield;
    INT MaxSpectators;
    INT NumSpectators;
    FStringNoInit AdminPassword;
    FStringNoInit GamePassword;
    class UClass* ScoreBoardType;
    class UClass* GameMenuType;
    FStringNoInit BotMenuType;
    FStringNoInit RulesMenuType;
    FStringNoInit SettingsMenuType;
    FStringNoInit MutatorMenuType;
    FStringNoInit MaplistMenuType;
    FStringNoInit GameUMenuType;
    FStringNoInit MultiplayerUMenuType;
    FStringNoInit GameOptionsMenuType;
    class UClass* HUDType;
    class UClass* MapListType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    FStringNoInit SpecialDamageString;
    FStringNoInit SwitchLevelMessage;
    INT SentText;
    FStringNoInit DefaultPlayerName;
    FStringNoInit LeftMessage;
    FStringNoInit FailedSpawnMessage;
    FStringNoInit FailedPlaceMessage;
    FStringNoInit FailedTeamMessage;
    FStringNoInit NameChangedMessage;
    FStringNoInit EnteredMessage;
    FStringNoInit GameName;
    FStringNoInit MaxedOutMessage;
    FStringNoInit WrongPassword;
    FStringNoInit NeedPassword;
    FStringNoInit IPBanned;
    INT MaxPlayers;
    INT NumPlayers;
    INT CurrentID;
    FStringNoInit IPPolicies[50];
    class UClass* DeathMessageClass;
    class UClass* DMMessageClass;
    class UClass* MutatorClass;
    class AMutator* BaseMutator;
    class AMutator* DamageMutator;
    class UClass* WaterZoneType;
    FName DefaultPlayerState;
    class UClass* GameReplicationInfoClass;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit ServerLogName;
    class AStatLog* LocalLog;
    class AStatLog* WorldLog;
    BITFIELD bLocalLog:1 GCC_PACK(4);
    BITFIELD bWorldLog:1;
    BITFIELD bBatchLocal:1;
    BITFIELD bSubtitles:1;
    BITFIELD bLoggingGame:1;
    FStringNoInit LocalLogFileName GCC_PACK(4);
    FStringNoInit WorldLogFileName;
    class UClass* StatLogClass;
    INT DemoBuild;
    INT DemoHasTuts;
    FLOAT DebrisPercentage;
    FLOAT ParticlePercentage;
    BITFIELD bAllowLimbSever:1 GCC_PACK(4);
    DECLARE_FUNCTION(execParseKillMessage);
    DECLARE_FUNCTION(execGetNetworkNumber);
    void eventAcceptInventory(class APawn* PlayerPawn)
    {
        AGameInfo_eventAcceptInventory_Parms Parms;
        Parms.PlayerPawn=PlayerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&Parms);
    }
    void eventPostLogin(class APlayerPawn* NewPlayer)
    {
        AGameInfo_eventPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&Parms);
    }
    class APlayerPawn* eventLogin(const FString& Portal, const FString& Options, FString& Error, class UClass* SpawnClass)
    {
        AGameInfo_eventLogin_Parms Parms;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        Parms.SpawnClass=SpawnClass;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    void eventPreLogin(const FString& Options, const FString& Address, FString& Error, FString& FailCode)
    {
        AGameInfo_eventPreLogin_Parms Parms;
        Parms.Options=Options;
        Parms.Address=Address;
        Parms.Error=Error;
        Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
        Error=Parms.Error;
        FailCode=Parms.FailCode;
    }
    FString eventGetBeaconText()
    {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitGame(const FString& Options, FString& Error)
    {
        AGameInfo_eventInitGame_Parms Parms;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
        Error=Parms.Error;
    }
    void eventDetailChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
    }
    void eventGameEnding()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
    }
    DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};


struct AMutator_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AMutator : public AInfo
{
public:
    class AMutator* NextMutator;
    class AMutator* NextDamageMutator;
    class AMutator* NextHUDMutator;
    BITFIELD bHUDMutator:1 GCC_PACK(4);
    class UClass* DefaultWeapon GCC_PACK(4);
    class UClass* DefaultShield;
    void eventPostRender(class UCanvas* Canvas)
    {
        AMutator_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    DECLARE_CLASS(AMutator,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMutator)
};


class ENGINE_API ADecoration : public AActor
{
public:
    class UClass* EffectWhenDestroyed;
    BITFIELD bPushable:1 GCC_PACK(4);
    BITFIELD bOnlyTriggerable:1;
    BITFIELD bSplash:1;
    BITFIELD bBobbing:1;
    BITFIELD bWasCarried:1;
    class USound* PushSound GCC_PACK(4);
    INT numLandings;
    class UClass* contents;
    class UClass* content2;
    class UClass* content3;
    class USound* EndPushSound;
    BITFIELD bPushSoundPlaying:1 GCC_PACK(4);
    DECLARE_CLASS(ADecoration,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecoration)
};


class ENGINE_API ACarcass : public ADecoration
{
public:
    BITFIELD bPlayerCarcass:1 GCC_PACK(4);
    BYTE flies GCC_PACK(4);
    BYTE rats;
    BITFIELD bReducedHeight:1 GCC_PACK(4);
    BITFIELD bDecorative:1;
    BITFIELD bSlidingCarcass:1;
    INT CumulativeDamage GCC_PACK(4);
    class APlayerReplicationInfo* PlayerOwner;
    class APawn* Bugs;
    DECLARE_CLASS(ACarcass,ADecoration,0,Engine)
    #include "ACarcass.h"
};


class ENGINE_API AMenu : public AActor
{
public:
    class AMenu* ParentMenu;
    INT Selection;
    INT MenuLength;
    BITFIELD bConfigChanged:1 GCC_PACK(4);
    BITFIELD bExitAllMenus:1;
    class APlayerPawn* PlayerOwner GCC_PACK(4);
    FStringNoInit HelpMessage[24];
    FStringNoInit MenuList[24];
    FStringNoInit LeftString;
    FStringNoInit RightString;
    FStringNoInit CenterString;
    FStringNoInit EnabledString;
    FStringNoInit DisabledString;
    FStringNoInit MenuTitle;
    FStringNoInit YesString;
    FStringNoInit NoString;
    DECLARE_CLASS(AMenu,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMenu)
};


class ENGINE_API AProjectile : public AActor
{
public:
    FLOAT speed;
    FLOAT MaxSpeed;
    FLOAT Damage;
    INT MomentumTransfer;
    FName MyDamageType;
    class USound* SpawnSound;
    class USound* ImpactSound;
    class USound* MiscSound;
    FLOAT ExploWallOut;
    class UClass* ExplosionDecal;
    DECLARE_CLASS(AProjectile,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AProjectile)
};


class ENGINE_API ALight : public AActor
{
public:
    DECLARE_CLASS(ALight,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALight)
};


class ENGINE_API ULevelSummary : public UObject
{
public:
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LevelEnterText;
    DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
    #include "ULevelSummary.h"
};

#endif

AUTOGENERATE_FUNCTION(APolyobj,669,execGetTexture);
AUTOGENERATE_FUNCTION(APolyobj,668,execGetCollisionRadius);
AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,313,execSweepActors);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execDemoPlaySound);
AUTOGENERATE_FUNCTION(AActor,268,execStopAllSound);
AUTOGENERATE_FUNCTION(AActor,265,execStopSound);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayOwnedSound);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,667,execLipSyncString);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,666,execTraceTexture);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,293,execGetAnimGroup);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,256,execSleep);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,663,execCalcArcVelocity);
AUTOGENERATE_FUNCTION(AActor,661,execRelease);
AUTOGENERATE_FUNCTION(AActor,660,execWaitForRelease);
AUTOGENERATE_FUNCTION(AActor,622,execFrameSweep);
AUTOGENERATE_FUNCTION(AActor,621,execSetJointRot);
AUTOGENERATE_FUNCTION(AActor,620,execResetAnimationCache);
AUTOGENERATE_FUNCTION(AActor,619,execJointNamed);
AUTOGENERATE_FUNCTION(AActor,618,execClosestJointTo);
AUTOGENERATE_FUNCTION(AActor,617,execActorAttachedTo);
AUTOGENERATE_FUNCTION(AActor,616,execTurnJointTo);
AUTOGENERATE_FUNCTION(AActor,614,execDetachActorFromJoint);
AUTOGENERATE_FUNCTION(AActor,613,execAttachActorToJoint);
AUTOGENERATE_FUNCTION(AActor,611,execSetDefaultJointFlags);
AUTOGENERATE_FUNCTION(AActor,610,execSetDefaultPolygroups);
AUTOGENERATE_FUNCTION(AActor,609,execNumJoints);
AUTOGENERATE_FUNCTION(AActor,608,execApplyJointForce);
AUTOGENERATE_FUNCTION(AActor,605,execGetJointName);
AUTOGENERATE_FUNCTION(AActor,603,execGetJointRot);
AUTOGENERATE_FUNCTION(AActor,602,execGetJointPos);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerPawn,546,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerPawn,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APawn,670,execSkeletonLook);
AUTOGENERATE_FUNCTION(APawn,-1,execStopWaiting);
AUTOGENERATE_FUNCTION(APawn,535,execFindWaterLine);
AUTOGENERATE_FUNCTION(APawn,534,execPickAnyTarget);
AUTOGENERATE_FUNCTION(APawn,531,execPickTarget);
AUTOGENERATE_FUNCTION(APawn,530,execRemovePawn);
AUTOGENERATE_FUNCTION(APawn,529,execAddPawn);
AUTOGENERATE_FUNCTION(APawn,540,execFindBestInventoryPath);
AUTOGENERATE_FUNCTION(APawn,527,execWaitForLanding);
AUTOGENERATE_FUNCTION(APawn,524,execFindStairRotation);
AUTOGENERATE_FUNCTION(APawn,526,execPickWallAdjust);
AUTOGENERATE_FUNCTION(APawn,665,execCloserNavPointTo);
AUTOGENERATE_FUNCTION(APawn,664,execNearestNavPoint);
AUTOGENERATE_FUNCTION(APawn,520,execactorReachable);
AUTOGENERATE_FUNCTION(APawn,521,execpointReachable);
AUTOGENERATE_FUNCTION(APawn,523,execEAdjustJump);
AUTOGENERATE_FUNCTION(APawn,522,execClearPaths);
AUTOGENERATE_FUNCTION(APawn,525,execFindRandomDest);
AUTOGENERATE_FUNCTION(APawn,517,execFindPathToward);
AUTOGENERATE_FUNCTION(APawn,518,execFindPathTo);
AUTOGENERATE_FUNCTION(APawn,533,execCanSee);
AUTOGENERATE_FUNCTION(APawn,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(APawn,510,execTurnToward);
AUTOGENERATE_FUNCTION(APawn,508,execTurnTo);
AUTOGENERATE_FUNCTION(APawn,506,execStrafeFacing);
AUTOGENERATE_FUNCTION(APawn,504,execStrafeTo);
AUTOGENERATE_FUNCTION(APawn,502,execMoveToward);
AUTOGENERATE_FUNCTION(APawn,500,execMoveTo);
AUTOGENERATE_FUNCTION(APawn,-1,execClientHearSound);
AUTOGENERATE_FUNCTION(ANavigationPoint,519,execdescribeSpec);
AUTOGENERATE_FUNCTION(ADecal,-1,execDetachDecal);
AUTOGENERATE_FUNCTION(ADecal,-1,execAttachDecal);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileFlush);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execGetChecksum);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execWatermark);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execOpenLog);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetGMTRef);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetPlayerChecksum);
AUTOGENERATE_FUNCTION(AStatLog,-1,execLogMutator);
AUTOGENERATE_FUNCTION(AStatLog,-1,execInitialCheck);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBrowseRelativeLocalURL);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteWorldLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBatchLocal);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteSilentLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteLocalLogBatcher);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif NAMES_ONLY

#if _MSC_VER
#pragma pack (pop)
#endif
